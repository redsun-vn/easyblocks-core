{"version":3,"file":"index.js","sources":["../../../../src/compiler/validate-color/index.ts"],"sourcesContent":["/**\n * This is a copy of validate-color function from validate-color npm package. This package has problem with bundling, so I copied it here. It was modified 100 years ago anyway and had 32 stars, so nothing fancy really.\n */\n\n// Good article on HTML Colors:\n// https://dev.to/alvaromontoro/the-ultimate-guide-to-css-colors-2020-edition-1bh1#hsl\n\n// Check if parameter is defined and a string\nconst isString = (color: string) => color && typeof color === \"string\";\n// All existing HTML color names\nconst htmlColorNames = [\n  \"AliceBlue\",\n  \"AntiqueWhite\",\n  \"Aqua\",\n  \"Aquamarine\",\n  \"Azure\",\n  \"Beige\",\n  \"Bisque\",\n  \"Black\",\n  \"BlanchedAlmond\",\n  \"Blue\",\n  \"BlueViolet\",\n  \"Brown\",\n  \"BurlyWood\",\n  \"CadetBlue\",\n  \"Chartreuse\",\n  \"Chocolate\",\n  \"Coral\",\n  \"CornflowerBlue\",\n  \"Cornsilk\",\n  \"Crimson\",\n  \"Cyan\",\n  \"DarkBlue\",\n  \"DarkCyan\",\n  \"DarkGoldenrod\",\n  \"DarkGray\",\n  \"DarkGreen\",\n  \"DarkKhaki\",\n  \"DarkMagenta\",\n  \"DarkOliveGreen\",\n  \"DarkOrange\",\n  \"DarkOrchid\",\n  \"DarkRed\",\n  \"DarkSalmon\",\n  \"DarkSeaGreen\",\n  \"DarkSlateBlue\",\n  \"DarkSlateGray\",\n  \"DarkTurquoise\",\n  \"DarkViolet\",\n  \"DeepPink\",\n  \"DeepSkyBlue\",\n  \"DimGray\",\n  \"DodgerBlue\",\n  \"FireBrick\",\n  \"FloralWhite\",\n  \"ForestGreen\",\n  \"Fuchsia\",\n  \"Gainsboro\",\n  \"GhostWhite\",\n  \"Gold\",\n  \"Goldenrod\",\n  \"Gray\",\n  \"Green\",\n  \"GreenYellow\",\n  \"HoneyDew\",\n  \"HotPink\",\n  \"IndianRed\",\n  \"Indigo\",\n  \"Ivory\",\n  \"Khaki\",\n  \"Lavender\",\n  \"LavenderBlush\",\n  \"LawnGreen\",\n  \"LemonChiffon\",\n  \"LightBlue\",\n  \"LightCoral\",\n  \"LightCyan\",\n  \"LightGoldenrodYellow\",\n  \"LightGray\",\n  \"LightGreen\",\n  \"LightPink\",\n  \"LightSalmon\",\n  \"LightSalmon\",\n  \"LightSeaGreen\",\n  \"LightSkyBlue\",\n  \"LightSlateGray\",\n  \"LightSteelBlue\",\n  \"LightYellow\",\n  \"Lime\",\n  \"LimeGreen\",\n  \"Linen\",\n  \"Magenta\",\n  \"Maroon\",\n  \"MediumAquamarine\",\n  \"MediumBlue\",\n  \"MediumOrchid\",\n  \"MediumPurple\",\n  \"MediumSeaGreen\",\n  \"MediumSlateBlue\",\n  \"MediumSlateBlue\",\n  \"MediumSpringGreen\",\n  \"MediumTurquoise\",\n  \"MediumVioletRed\",\n  \"MidnightBlue\",\n  \"MintCream\",\n  \"MistyRose\",\n  \"Moccasin\",\n  \"NavajoWhite\",\n  \"Navy\",\n  \"OldLace\",\n  \"Olive\",\n  \"OliveDrab\",\n  \"Orange\",\n  \"OrangeRed\",\n  \"Orchid\",\n  \"PaleGoldenrod\",\n  \"PaleGreen\",\n  \"PaleTurquoise\",\n  \"PaleVioletRed\",\n  \"PapayaWhip\",\n  \"PeachPuff\",\n  \"Peru\",\n  \"Pink\",\n  \"Plum\",\n  \"PowderBlue\",\n  \"Purple\",\n  \"RebeccaPurple\",\n  \"Red\",\n  \"RosyBrown\",\n  \"RoyalBlue\",\n  \"SaddleBrown\",\n  \"Salmon\",\n  \"SandyBrown\",\n  \"SeaGreen\",\n  \"SeaShell\",\n  \"Sienna\",\n  \"Silver\",\n  \"SkyBlue\",\n  \"SlateBlue\",\n  \"SlateGray\",\n  \"Snow\",\n  \"SpringGreen\",\n  \"SteelBlue\",\n  \"Tan\",\n  \"Teal\",\n  \"Thistle\",\n  \"Tomato\",\n  \"Turquoise\",\n  \"Violet\",\n  \"Wheat\",\n  \"White\",\n  \"WhiteSmoke\",\n  \"Yellow\",\n  \"YellowGreen\",\n];\n// These 3 values are valid, usable color names, which are special in their own way\nconst htmlColorNamesSpecial = [\"currentColor\", \"inherit\", \"transparent\"];\n\n// Validate HTML color name (red, yellow, etc)\nexport const validateHTMLColorName = (color: string): boolean => {\n  let status = false;\n  if (isString(color)) {\n    htmlColorNames.map((c) => {\n      if (color.toLowerCase() === c.toLowerCase()) {\n        status = true;\n      }\n      return null;\n    });\n  }\n  return status;\n};\n\n// Validate HTML color special name (currentColor, inherit, etc)\nexport const validateHTMLColorSpecialName = (color: string): boolean => {\n  let status = false;\n  if (isString(color)) {\n    htmlColorNamesSpecial.map((c) => {\n      if (color.toLowerCase() === c.toLowerCase()) {\n        status = true;\n      }\n      return null;\n    });\n  }\n  return status;\n};\n\n// Validate HTML color 'hex'\nexport const validateHTMLColorHex = (color: string): boolean => {\n  if (isString(color)) {\n    const regex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$/i;\n    return !!color && regex.test(color);\n  }\n  return false;\n};\n\n// Validate HTML color 'rgb'\n// -- legacy notation\n// color: rgb(255, 255, 255);\n// color: rgba(255, 255, 255, 1);\n// -- new notation\n// color: rgb(255 255 255);\n// color: rgb(255 255 255 / 1);\n// Note that 'rgba()' is now merged into 'rgb()'\nexport const validateHTMLColorRgb = (color: string): boolean => {\n  if (isString(color)) {\n    const regex =\n      /(rgb)a?\\((\\s*\\d+%?\\s*?,?\\s*){2}(\\s*\\d+%?\\s*?,?\\s*\\)?)(\\s*,?\\s*\\/?\\s*(0?\\.?\\d+%?\\s*)?|1|0)?\\)$/i;\n    return !!color && regex.test(color);\n  }\n  return false;\n};\n\nconst optionalCommaOrRequiredSpace = `((\\\\s*,\\\\s*)|(\\\\s+))`;\nconst optionalDecimals = `(\\\\.\\\\d+)?`;\nconst anyPercentage = `((\\\\d*${optionalDecimals})%)`;\nconst hundredPercent = `(([0-9]|[1-9][0-9]|100)%)`;\nconst alphaPercentage = `(((${hundredPercent}))|(0?${optionalDecimals})|1))?`;\nconst endingWithAlphaPercentage = `\\\\s*?\\\\)?)(\\\\s*?(\\\\/?)\\\\s+${alphaPercentage}\\\\s*?\\\\)$`;\n\n// Validate HTML color 'hsl'\n// -- These units are valid for the first parameter\n// 'deg': degrees | full circle = 360\n// 'gra': gradians | full circle = 400\n// 'radians': radians | full circle = 2Ï€ (approx. 6.28)\n// 'turn': turns | full circle = 1\nexport const validateHTMLColorHsl = (color: string): boolean => {\n  if (isString(color)) {\n    // Validate each possible unit value separately, as their values differ\n    const degRegex = `(-?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9]|360)(deg)?)`;\n    const graRegex = `(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-9][0-9]|400)gra)`;\n    const radRegex = `((([0-5])?\\\\.\\\\d+|6\\\\.([0-9]|1[0-9]|2[0-8])|[0-6])rad)`;\n    const turnRegex = `((0?${optionalDecimals}|1)turn)`;\n    const regexLogic = `(hsl)a?\\\\((\\\\s*?(${degRegex}|${graRegex}|${radRegex}|${turnRegex})${optionalCommaOrRequiredSpace})(\\\\s*?(0|${hundredPercent})${optionalCommaOrRequiredSpace})(\\\\s*?(0|${hundredPercent})\\\\s*?\\\\)?)(\\\\s*?(\\\\/?|,?)\\\\s*?(((${hundredPercent}))|(0?${optionalDecimals})|1))?\\\\)$`;\n    const regex = new RegExp(regexLogic);\n    return !!color && regex.test(color);\n  }\n  return false;\n};\n\n// Validate HTML color 'hwb'\n// -- 'hwb' accepts 'deg' as unit in its 1st property, which stands for 'hue'\n// 'deg': degrees | full circle = 360\nexport const validateHTMLColorHwb = (color: string): boolean => {\n  if (isString(color)) {\n    const degRegex = `(-?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9]|360)(deg)?)`;\n    const regexLogic = `(hwb\\\\(\\\\s*?${degRegex}\\\\s+)((0|${hundredPercent})\\\\s+)((0|${hundredPercent})${endingWithAlphaPercentage}`;\n    const regex = new RegExp(regexLogic);\n    return !!color && regex.test(color);\n  }\n  return false;\n};\n\n// Validate HTML color 'lab'\n// -- 'lab' 2nd & 3rd parameters are any number between -160 & 160\nexport const validateHTMLColorLab = (color: string): boolean => {\n  if (isString(color)) {\n    const labParam = `(-?(([0-9]|[1-9][0-9]|1[0-5][0-9])${optionalDecimals}?|160))`;\n    const regexLogic = `(lab\\\\(\\\\s*?${anyPercentage}\\\\s+${labParam}\\\\s+${labParam}${endingWithAlphaPercentage}`;\n    const regex = new RegExp(regexLogic);\n    return !!color && regex.test(color);\n  }\n\n  return false;\n};\n\n// Validate only HTML colors (`hex`, `rgb`, `rgba`, `hsl`, `hsla`, `hwb`, `lab`), without `name` og `special name`**\nexport const validateHTMLColor = (color: string): boolean => {\n  if (\n    (color && validateHTMLColorHex(color)) ||\n    validateHTMLColorRgb(color) ||\n    validateHTMLColorHsl(color) ||\n    validateHTMLColorHwb(color) ||\n    validateHTMLColorLab(color)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst validateColor = (color: string) => {\n  // Former validation - source: https://www.regextester.com/103656\n  // if (isString(color)) {\n  //   const regex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1|0)?\\)$/i;\n  //   return color && regex.test(color);\n  // }\n  // New validation\n  if (\n    (color && validateHTMLColorHex(color)) ||\n    validateHTMLColorName(color) ||\n    validateHTMLColorSpecialName(color) ||\n    validateHTMLColorRgb(color) ||\n    validateHTMLColorHsl(color) ||\n    validateHTMLColorHwb(color) ||\n    validateHTMLColorLab(color)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport { validateColor };\n"],"names":["isString","color","htmlColorNames","htmlColorNamesSpecial","validateHTMLColorName","status","map","c","toLowerCase","validateHTMLColorSpecialName","validateHTMLColorHex","regex","test","validateHTMLColorRgb","optionalCommaOrRequiredSpace","optionalDecimals","anyPercentage","hundredPercent","alphaPercentage","endingWithAlphaPercentage","validateHTMLColorHsl","degRegex","graRegex","radRegex","turnRegex","regexLogic","RegExp","validateHTMLColorHwb","validateHTMLColorLab","labParam","validateColor"],"mappings":"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"}