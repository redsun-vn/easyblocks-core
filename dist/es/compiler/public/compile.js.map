{"version":3,"file":"compile.js","sources":["../../../../src/compiler/public/compile.ts"],"sourcesContent":["import { mergeCompilationMeta } from \"../mergeCompilationMeta\";\nimport { CompilationMetadata, CompilerModule } from \"../../types\";\nimport { compileInternal } from \"../compileInternal\";\nimport { createCompilationContext } from \"../createCompilationContext\";\nimport { normalizeInput } from \"../normalizeInput\";\n\nexport const compile: CompilerModule[\"compile\"] = (\n  content,\n  config,\n  contextParams\n) => {\n  let resultMeta: CompilationMetadata = {\n    // @ts-expect-error We can leave `devices` and `locale` undefined because these values are set in `compileInternal`.\n    vars: {},\n    code: {},\n  };\n\n  const compilationContext = createCompilationContext(\n    config,\n    contextParams,\n    content._component\n  );\n\n  const inputConfigComponent = normalizeInput(content);\n\n  const { meta, compiled, configAfterAuto } = compileInternal(\n    inputConfigComponent,\n    compilationContext\n  );\n\n  resultMeta = mergeCompilationMeta(resultMeta, meta);\n\n  return {\n    compiled,\n    configAfterAuto,\n    meta: resultMeta,\n  };\n};\n"],"names":["compile","content","config","contextParams","resultMeta","vars","code","compilationContext","createCompilationContext","_component","inputConfigComponent","normalizeInput","meta","compiled","configAfterAuto","compileInternal","mergeCompilationMeta"],"mappings":";;;;;;AAMO,MAAMA,OAAkC,GAAGA,CAChDC,OAAO,EACPC,MAAM,EACNC,aAAa,KACV;AACH,EAAA,IAAIC,UAA+B,GAAG;AACpC;IACAC,IAAI,EAAE,EAAE;AACRC,IAAAA,IAAI,EAAE,EAAC;GACR,CAAA;EAED,MAAMC,kBAAkB,GAAGC,wBAAwB,CACjDN,MAAM,EACNC,aAAa,EACbF,OAAO,CAACQ,UACV,CAAC,CAAA;AAED,EAAA,MAAMC,oBAAoB,GAAGC,cAAc,CAACV,OAAO,CAAC,CAAA;EAEpD,MAAM;IAAEW,IAAI;IAAEC,QAAQ;AAAEC,IAAAA,eAAAA;AAAgB,GAAC,GAAGC,eAAe,CACzDL,oBAAoB,EACpBH,kBACF,CAAC,CAAA;AAEDH,EAAAA,UAAU,GAAGY,oBAAoB,CAACZ,UAAU,EAAEQ,IAAI,CAAC,CAAA;EAEnD,OAAO;IACLC,QAAQ;IACRC,eAAe;AACfF,IAAAA,IAAI,EAAER,UAAAA;GACP,CAAA;AACH;;;;"}