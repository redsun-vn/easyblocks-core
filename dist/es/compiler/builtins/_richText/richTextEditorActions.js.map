{"version":3,"file":"richTextEditorActions.js","sources":["../../../../../src/compiler/builtins/$richText/richTextEditorActions.ts"],"sourcesContent":["import { nonNullable } from \"@/utils\";\r\nimport { BaseRange, Editor, Node, Range, Text, Transforms } from \"slate\";\r\nimport { SetNonNullable } from \"type-fest\";\r\nimport { RichTextComponentConfig } from \"./$richText\";\r\nimport { BlockElement } from \"./$richText.types\";\r\nimport { RichTextPartComponentConfig } from \"./$richTextPart/$richTextPart\";\r\nimport { convertEditorValueToRichTextElements } from \"./utils/convertEditorValueToRichTextElements\";\r\nimport { getFocusedRichTextPartsConfigPaths } from \"./utils/getFocusedRichTextPartsConfigPaths\";\r\n\r\ntype SelectedEditor = SetNonNullable<Editor, \"selection\">;\r\n\r\nfunction isEditorSelection(editor: Editor): editor is SelectedEditor {\r\n  return editor.selection !== null;\r\n}\r\n\r\nfunction updateSelection<\r\n  T extends keyof Omit<\r\n    RichTextPartComponentConfig,\r\n    \"_id\" | \"_component\" | \"value\"\r\n  >\r\n>(\r\n  editor: Editor,\r\n  key: T,\r\n  ...values: Array<RichTextPartComponentConfig[T]>\r\n):\r\n  | {\r\n    elements: RichTextComponentConfig[\"elements\"][string];\r\n    focusedRichTextParts: Array<string>;\r\n  }\r\n  | undefined {\r\n  if (!isEditorSelection(editor)) {\r\n    return;\r\n  }\r\n\r\n  const isSelectionCollapsed = Range.isCollapsed(editor.selection);\r\n\r\n  if (values.length === 1) {\r\n    if (key === \"TextWrapper\" && isSelectionCollapsed) {\r\n      expandCurrentSelectionToWholeTextPart(editor);\r\n    }\r\n\r\n    // If `values` contains one element, we want to apply this value to all text nodes.\r\n    Editor.addMark(editor, key, values[0]);\r\n\r\n    if (key === \"TextWrapper\") {\r\n      if (values[0].length > 0) {\r\n        const firstSelectedNodeEntry = Node.first(\r\n          editor,\r\n          editor.selection.anchor.path\r\n        );\r\n\r\n        const lastSelectedNodeEntry = Node.last(\r\n          editor,\r\n          editor.selection.focus.path\r\n        );\r\n\r\n        if (Text.isText(firstSelectedNodeEntry[0])) {\r\n          const firstSelectedNode = firstSelectedNodeEntry[0];\r\n          const lastSelectedNode = lastSelectedNodeEntry[0];\r\n\r\n          if (firstSelectedNode !== lastSelectedNode) {\r\n            Transforms.setNodes(\r\n              editor,\r\n              {\r\n                color: firstSelectedNode.color,\r\n                font: firstSelectedNode.font,\r\n              },\r\n              {\r\n                match: Text.isText,\r\n              }\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    // If `values` contains multiple values, we want to update each selected text node separately with its\r\n    // corresponding value. To do that, we need to obtain selection range for each selected text node\r\n    // and apply correct value.\r\n    const selectedTextNodeEntries = Array.from(\r\n      Editor.nodes<Text>(editor, {\r\n        match: Text.isText,\r\n      })\r\n    );\r\n\r\n    const selectedTextNodesRanges = selectedTextNodeEntries\r\n      .map(([, textNodePath]) => {\r\n        return Range.intersection(\r\n          editor.selection,\r\n          Editor.range(editor, textNodePath)\r\n        );\r\n      })\r\n      .filter<BaseRange>(nonNullable());\r\n\r\n    Editor.withoutNormalizing(editor, () => {\r\n      selectedTextNodesRanges.reverse().forEach((range, index) => {\r\n        Transforms.setNodes(\r\n          editor,\r\n          {\r\n            [key]: values[index],\r\n          },\r\n          {\r\n            at: range,\r\n            match: Text.isText,\r\n            split: true,\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  const richTextElements = convertEditorValueToRichTextElements(\r\n    editor.children as Array<BlockElement>\r\n  );\r\n\r\n  const newFocusedRichTextParts = getFocusedRichTextPartsConfigPaths(editor);\r\n\r\n  return {\r\n    elements: richTextElements,\r\n    focusedRichTextParts: newFocusedRichTextParts,\r\n  };\r\n}\r\n\r\nexport { updateSelection };\r\n\r\nfunction expandCurrentSelectionToWholeTextPart(editor: Editor) {\r\n  const textPartPath = Editor.path(editor, editor.selection!.anchor.path);\r\n\r\n  Transforms.setSelection(editor, {\r\n    anchor: Editor.start(editor, textPartPath),\r\n    focus: Editor.end(editor, textPartPath),\r\n  });\r\n}\r\n"],"names":["isEditorSelection","editor","selection","updateSelection","key","_len","arguments","length","values","Array","_key","isSelectionCollapsed","Range","isCollapsed","expandCurrentSelectionToWholeTextPart","Editor","addMark","firstSelectedNodeEntry","Node","first","anchor","path","lastSelectedNodeEntry","last","focus","Text","isText","firstSelectedNode","lastSelectedNode","Transforms","setNodes","color","font","match","selectedTextNodeEntries","from","nodes","selectedTextNodesRanges","map","_ref","textNodePath","intersection","range","filter","nonNullable","withoutNormalizing","reverse","forEach","index","at","split","richTextElements","convertEditorValueToRichTextElements","children","newFocusedRichTextParts","getFocusedRichTextPartsConfigPaths","elements","focusedRichTextParts","textPartPath","setSelection","start","end"],"mappings":"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"}