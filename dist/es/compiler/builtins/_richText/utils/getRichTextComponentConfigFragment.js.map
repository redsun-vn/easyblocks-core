{"version":3,"file":"getRichTextComponentConfigFragment.js","sources":["../../../../../../src/compiler/builtins/$richText/utils/getRichTextComponentConfigFragment.ts"],"sourcesContent":["import {\r\n  dotNotationGet as get,\r\n  dotNotationSet as set,\r\n} from \"@/utils\";\r\nimport { RichTextComponentConfig } from \"../$richText\";\r\nimport { RichTextPartComponentConfig } from \"../$richTextPart/$richTextPart\";\r\nimport { duplicateConfig } from \"../../../duplicateConfig\";\r\nimport { EditorContextType } from \"../../../types\";\r\nimport { parseFocusedRichTextPartConfigPath } from \"./parseRichTextPartConfigPath\";\r\nimport { stripRichTextPartSelection } from \"./stripRichTextTextPartSelection\";\r\n\r\nfunction getRichTextComponentConfigFragment(\r\n  sourceRichTextComponentConfig: RichTextComponentConfig,\r\n  editorContext: EditorContextType\r\n): RichTextComponentConfig & {\r\n  _itemProps?: Record<string, unknown>;\r\n} {\r\n  const { focussedField, form, contextParams } = editorContext;\r\n\r\n  const newRichTextComponentConfig: RichTextComponentConfig = {\r\n    ...sourceRichTextComponentConfig,\r\n    elements: {\r\n      [contextParams.locale]: [],\r\n    },\r\n  };\r\n\r\n  focussedField.forEach((focusedField) => {\r\n    const textPartConfig: RichTextPartComponentConfig = get(\r\n      form.values,\r\n      stripRichTextPartSelection(focusedField)\r\n    );\r\n\r\n    const { path, range } = parseFocusedRichTextPartConfigPath(focusedField);\r\n\r\n    const newTextPartConfig = duplicateConfig(textPartConfig, editorContext);\r\n\r\n    if (range) {\r\n      newTextPartConfig.value = textPartConfig.value.slice(...range);\r\n    }\r\n\r\n    let lastParentConfigPath = `elements.${contextParams.locale}`;\r\n\r\n    path.slice(0, -1).forEach((pathIndex, index) => {\r\n      let currentConfigPath = lastParentConfigPath;\r\n\r\n      if (index === 0) {\r\n        currentConfigPath += `.${pathIndex}`;\r\n      } else {\r\n        const parentConfig = get(\r\n          newRichTextComponentConfig,\r\n          lastParentConfigPath\r\n        );\r\n\r\n        currentConfigPath += `.elements.${Math.min(\r\n          parentConfig.elements.length,\r\n          pathIndex\r\n        )}`;\r\n      }\r\n\r\n      const currentConfig = get(newRichTextComponentConfig, currentConfigPath);\r\n\r\n      if (!currentConfig) {\r\n        const sourceConfigPath =\r\n          lastParentConfigPath +\r\n          (index === 0 ? `.${pathIndex}` : `.elements.${pathIndex}`);\r\n\r\n        const sourceConfig = get(\r\n          sourceRichTextComponentConfig,\r\n          sourceConfigPath\r\n        );\r\n\r\n        const configCopy = {\r\n          ...sourceConfig,\r\n          elements: [],\r\n        };\r\n\r\n        set(newRichTextComponentConfig, currentConfigPath, configCopy);\r\n      }\r\n\r\n      lastParentConfigPath = currentConfigPath;\r\n    });\r\n\r\n    const textPartParentConfig = get(\r\n      newRichTextComponentConfig,\r\n      lastParentConfigPath\r\n    );\r\n\r\n    set(newRichTextComponentConfig, lastParentConfigPath, {\r\n      ...textPartParentConfig,\r\n      elements: [...textPartParentConfig.elements, newTextPartConfig],\r\n    });\r\n  });\r\n\r\n  return newRichTextComponentConfig;\r\n}\r\n\r\nexport { getRichTextComponentConfigFragment };\r\n"],"names":["getRichTextComponentConfigFragment","sourceRichTextComponentConfig","editorContext","focussedField","form","contextParams","newRichTextComponentConfig","elements","locale","forEach","focusedField","textPartConfig","get","values","stripRichTextPartSelection","path","range","parseFocusedRichTextPartConfigPath","newTextPartConfig","duplicateConfig","value","slice","lastParentConfigPath","pathIndex","index","currentConfigPath","parentConfig","Math","min","length","currentConfig","sourceConfigPath","sourceConfig","configCopy","set","textPartParentConfig"],"mappings":"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"}