{"version":3,"file":"getMostCommonValueFromRichTextParts.js","sources":["../../../src/compiler/getMostCommonValueFromRichTextParts.ts"],"sourcesContent":["import { entries } from \"@/utils\";\r\nimport { getFallbackForLocale } from \"../locales\";\r\nimport { DeviceRange } from \"../types\";\r\nimport { CompilationCache } from \"./CompilationCache\";\r\nimport { RichTextComponentConfig } from \"./builtins/$richText/$richText\";\r\nimport { RichTextBlockElementComponentConfig } from \"./builtins/$richText/$richTextBlockElement/$richTextBlockElement\";\r\nimport {\r\n  RichTextPartComponentConfig,\r\n  richTextPartEditableComponent,\r\n} from \"./builtins/$richText/$richTextPart/$richTextPart\";\r\nimport { compileComponentValues } from \"./compileComponentValues\";\r\nimport { findComponentDefinitionById } from \"./findComponentDefinition\";\r\nimport { CompilationContextType, InternalComponentDefinition } from \"./types\";\r\n\r\n/**\r\n * Returns the most common value for given `prop` parameter among all @easyblocks/rich-text-part components from `richTextComponentConfig`.\r\n */\r\nfunction getMostCommonValueFromRichTextParts<\r\n  RichTextPartProperty extends Extract<\r\n    keyof RichTextPartComponentConfig,\r\n    \"color\" | \"font\"\r\n  >\r\n>(\r\n  richTextComponentConfig: RichTextComponentConfig,\r\n  prop: RichTextPartProperty,\r\n  compilationContext: CompilationContextType,\r\n  cache: CompilationCache\r\n) {\r\n  const richTextBlockElements:\r\n    | Array<RichTextBlockElementComponentConfig>\r\n    | undefined =\r\n    richTextComponentConfig.elements[compilationContext.contextParams.locale] ??\r\n    getFallbackForLocale(\r\n      richTextComponentConfig.elements,\r\n      compilationContext.contextParams.locale,\r\n      compilationContext.locales\r\n    );\r\n\r\n  if (!richTextBlockElements) {\r\n    return;\r\n  }\r\n\r\n  const richTextParts = richTextBlockElements.flatMap((blockElement) => {\r\n    return blockElement.elements.flatMap((lineElement) => {\r\n      return lineElement.elements;\r\n    });\r\n  });\r\n\r\n  const richTextPartComponentDefinition = findComponentDefinitionById(\r\n    richTextPartEditableComponent.id,\r\n    compilationContext\r\n  )!;\r\n\r\n  const deviceIdToRichTextPartValuesGroupedByPropValue = Object.fromEntries(\r\n    compilationContext.devices\r\n      .map((device) => {\r\n        const richTextPartsCompiledPropValues = richTextParts.flatMap(\r\n          (richTextPart) => {\r\n            return mapRichTextPartToCompiledPropValue(\r\n              richTextPart,\r\n              richTextPartComponentDefinition,\r\n              compilationContext,\r\n              prop,\r\n              cache\r\n            );\r\n          }\r\n        );\r\n\r\n        const richTextPartValuesLengthGroupedByPropValue =\r\n          richTextPartsCompiledPropValues.reduce(\r\n            (acc, current) =>\r\n              groupTotalValueLengthByCompiledPropValue<RichTextPartProperty>(\r\n                prop,\r\n                device\r\n              )(acc, current),\r\n            {} as Record<string, number>\r\n          );\r\n\r\n        return [device.id, richTextPartValuesLengthGroupedByPropValue] as const;\r\n      })\r\n      .filter((entry) => Object.keys(entry[1]).length > 0)\r\n      .map((entry) => {\r\n        return [\r\n          entry[0],\r\n          getCompiledValueFromEntryWithMaxTotalValueLength(entry),\r\n        ];\r\n      })\r\n  );\r\n\r\n  if (\r\n    Object.keys(deviceIdToRichTextPartValuesGroupedByPropValue).length === 0\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  return { $res: true, ...deviceIdToRichTextPartValuesGroupedByPropValue };\r\n}\r\n\r\nexport { getMostCommonValueFromRichTextParts };\r\n\r\nfunction getCompiledValueFromEntryWithMaxTotalValueLength(\r\n  entry: readonly [string, Record<string, number>]\r\n): any {\r\n  const compiledPropValue = entries(entry[1]).reduce((maxEntry, currentEntry) =>\r\n    currentEntry[1] > maxEntry[1] ? currentEntry : maxEntry\r\n  )[0];\r\n\r\n  try {\r\n    return JSON.parse(compiledPropValue);\r\n  } catch {\r\n    return compiledPropValue;\r\n  }\r\n}\r\n\r\nfunction groupTotalValueLengthByCompiledPropValue<\r\n  RichTextPartProperty extends Extract<\r\n    keyof RichTextPartComponentConfig,\r\n    \"color\" | \"font\"\r\n  >\r\n>(\r\n  prop: RichTextPartProperty,\r\n  device: DeviceRange\r\n): (\r\n  previousValue: Record<string, number>,\r\n  currentValue: { [x: string]: any; value: string }\r\n) => Record<string, number> {\r\n  return (acc, current) => {\r\n    const key = JSON.stringify(current[prop][device.id]);\r\n\r\n    if (key === undefined) {\r\n      return acc;\r\n    }\r\n\r\n    if (!acc[key]) {\r\n      acc[key] = 0;\r\n    }\r\n\r\n    acc[key] += current.value.length;\r\n    return acc;\r\n  };\r\n}\r\n\r\nfunction mapRichTextPartToCompiledPropValue(\r\n  richTextPart: RichTextPartComponentConfig,\r\n  richTextPartComponentDefinition: InternalComponentDefinition,\r\n  compilationContext: CompilationContextType,\r\n  prop: string,\r\n  cache: CompilationCache\r\n) {\r\n  const compiledValues = compileComponentValues(\r\n    richTextPart,\r\n    richTextPartComponentDefinition,\r\n    compilationContext,\r\n    cache\r\n  );\r\n\r\n  return {\r\n    value: richTextPart.value,\r\n    [prop]: compiledValues[prop],\r\n  };\r\n}\r\n"],"names":["getMostCommonValueFromRichTextParts","richTextComponentConfig","prop","compilationContext","cache","richTextBlockElements","elements","contextParams","locale","getFallbackForLocale","locales","richTextParts","flatMap","blockElement","lineElement","richTextPartComponentDefinition","findComponentDefinitionById","richTextPartEditableComponent","id","deviceIdToRichTextPartValuesGroupedByPropValue","Object","fromEntries","devices","map","device","richTextPartsCompiledPropValues","richTextPart","mapRichTextPartToCompiledPropValue","richTextPartValuesLengthGroupedByPropValue","reduce","acc","current","groupTotalValueLengthByCompiledPropValue","filter","entry","keys","length","getCompiledValueFromEntryWithMaxTotalValueLength","$res","compiledPropValue","entries","maxEntry","currentEntry","JSON","parse","key","stringify","undefined","value","compiledValues","compileComponentValues"],"mappings":"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"}