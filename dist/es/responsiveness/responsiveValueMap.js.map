{"version":3,"file":"responsiveValueMap.js","sources":["../../../src/responsiveness/responsiveValueMap.ts"],"sourcesContent":["import { ResponsiveValue, TrulyResponsiveValue } from \"../types\";\r\nimport { UnwrapResponsiveValue } from \"./types\";\r\nimport { isTrulyResponsiveValue } from \"./isTrulyResponsiveValue\";\r\nimport { responsiveValueEntries } from \"./responsiveValueEntries\";\r\n\r\ntype InferReturnType<\r\n  Type extends ResponsiveValue<unknown>,\r\n  MappedType\r\n> = Type extends TrulyResponsiveValue<unknown>\r\n  ? TrulyResponsiveValue<MappedType>\r\n  : MappedType;\r\n\r\nexport function responsiveValueMap<\r\n  Input extends ResponsiveValue<unknown>,\r\n  Output\r\n>(\r\n  resVal: Input,\r\n  mapper: (\r\n    val: UnwrapResponsiveValue<Input>,\r\n    breakpointIndex?: string\r\n  ) => Output\r\n): InferReturnType<Input, Output> {\r\n  if (!isTrulyResponsiveValue(resVal)) {\r\n    return mapper(resVal as UnwrapResponsiveValue<Input>) as InferReturnType<\r\n      Input,\r\n      Output\r\n    >;\r\n  }\r\n\r\n  const ret: TrulyResponsiveValue<Output> = { $res: true };\r\n\r\n  responsiveValueEntries(resVal).forEach(([key, value]) => {\r\n    ret[key] = mapper(value as UnwrapResponsiveValue<Input>, key);\r\n  });\r\n\r\n  return ret as InferReturnType<Input, Output>;\r\n}\r\n"],"names":["responsiveValueMap","resVal","mapper","isTrulyResponsiveValue","ret","$res","responsiveValueEntries","forEach","_ref","key","value"],"mappings":";;;;AAYO,SAASA,kBAAkBA,CAIhCC,MAAa,EACbC,MAGW,EACqB;AAChC,EAAA,IAAI,CAACC,sBAAsB,CAACF,MAAM,CAAC,EAAE;IACnC,OAAOC,MAAM,CAACD,MAAsC,CAAC,CAAA;AAIvD,GAAA;AAEA,EAAA,MAAMG,GAAiC,GAAG;AAAEC,IAAAA,IAAI,EAAE,IAAA;GAAM,CAAA;AAExDC,EAAAA,sBAAsB,CAACL,MAAM,CAAC,CAACM,OAAO,CAACC,IAAA,IAAkB;AAAA,IAAA,IAAjB,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,IAAA,CAAA;IAClDJ,GAAG,CAACK,GAAG,CAAC,GAAGP,MAAM,CAACQ,KAAK,EAAkCD,GAAG,CAAC,CAAA;AAC/D,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOL,GAAG,CAAA;AACZ;;;;"}