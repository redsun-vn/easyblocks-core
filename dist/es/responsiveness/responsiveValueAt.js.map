{"version":3,"file":"responsiveValueAt.js","sources":["../../../src/responsiveness/responsiveValueAt.ts"],"sourcesContent":["import { TrulyResponsiveValue } from \"../types\";\n\n/**\n * Because of how `TrulyResponsiveValue` is typed, if we try to access value at the current breakpoint it would return `true | T | undefined`.\n * The literal type `true` in this type shouldn't be included, because it makes no sense.\n * This comes from definition of `$res` property which is a special property that marks given object as responsive value instead of normal object.\n */\nfunction responsiveValueAt<T>(\n  responsiveValue: TrulyResponsiveValue<T>,\n  breakpointIndex: string\n): T | undefined {\n  if (breakpointIndex === \"$res\") {\n    throw new Error(\n      \"This situation isn't possible! Value of responsive value must be accessed by valid breakpoint name\"\n    );\n  }\n\n  const breakpointValue = responsiveValue[breakpointIndex] as Exclude<\n    TrulyResponsiveValue<T>[string],\n    boolean\n  >;\n  return breakpointValue;\n}\n\nexport { responsiveValueAt };\n"],"names":["responsiveValueAt","responsiveValue","breakpointIndex","Error","breakpointValue"],"mappings":";AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiBA,CACxBC,eAAwC,EACxCC,eAAuB,EACR;EACf,IAAIA,eAAe,KAAK,MAAM,EAAE;AAC9B,IAAA,MAAM,IAAIC,KAAK,CACb,oGACF,CAAC,CAAA;AACH,GAAA;AAEA,EAAA,MAAMC,eAAe,GAAGH,eAAe,CAACC,eAAe,CAGtD,CAAA;AACD,EAAA,OAAOE,eAAe,CAAA;AACxB;;;;"}