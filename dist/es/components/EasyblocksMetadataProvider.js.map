{"version":3,"file":"EasyblocksMetadataProvider.js","sources":["../../../src/components/EasyblocksMetadataProvider.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createStitches } from \"@stitches/core\";\r\nimport React, { createContext, ReactNode, useContext } from \"react\";\r\nimport { easyblocksStitchesInstances } from \"./ssr\";\r\nimport { CompilationMetadata } from \"../types\";\r\n\r\nconst EasyblocksMetadataContext = createContext<\r\n  (CompilationMetadata & { stitches: any }) | undefined\r\n>(undefined);\r\n\r\ntype EasyblocksMetadataProviderProps = {\r\n  children: ReactNode;\r\n  meta: CompilationMetadata;\r\n};\r\n\r\nconst EasyblocksMetadataProvider: React.FC<EasyblocksMetadataProviderProps> = ({\r\n  meta,\r\n  children,\r\n}) => {\r\n  // Let's load stitches instance\r\n  if (easyblocksStitchesInstances.length === 0) {\r\n    easyblocksStitchesInstances.push(createStitches({}));\r\n  }\r\n\r\n  return (\r\n    <EasyblocksMetadataContext.Provider\r\n      value={{\r\n        ...meta,\r\n        stitches: easyblocksStitchesInstances[0],\r\n      }}\r\n    >\r\n      {children}\r\n    </EasyblocksMetadataContext.Provider>\r\n  );\r\n};\r\n\r\nfunction useEasyblocksMetadata() {\r\n  const context = useContext(EasyblocksMetadataContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\r\n      \"useEasyblocksMetadata must be used within a EasyblocksMetadataProvider\"\r\n    );\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { EasyblocksMetadataProvider, useEasyblocksMetadata };\r\n"],"names":["EasyblocksMetadataProvider","children","value"],"mappings":";;;;;;AAOA;AASMA;;;AAEJC;AACF;AACE;AACA;;AAEA;AAEA;AAEIC;AACE;;AAEF;AAAE;AAKR;AAEA;AACE;;AAGE;AAGF;AAEA;AACF;;"}