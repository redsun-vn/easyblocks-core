{"version":3,"file":"EasyblocksMetadataProvider.js","sources":["../../../src/components/EasyblocksMetadataProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport { createStitches } from \"@stitches/core\";\nimport React, { createContext, ReactNode, useContext } from \"react\";\nimport { easyblocksStitchesInstances } from \"./ssr\";\nimport { CompilationMetadata } from \"../types\";\n\nconst EasyblocksMetadataContext = createContext<\n  (CompilationMetadata & { stitches: any }) | undefined\n>(undefined);\n\ntype EasyblocksMetadataProviderProps = {\n  children: ReactNode;\n  meta: CompilationMetadata;\n};\n\nconst EasyblocksMetadataProvider: React.FC<EasyblocksMetadataProviderProps> = ({\n  meta,\n  children,\n}) => {\n  // Let's load stitches instance\n  if (easyblocksStitchesInstances.length === 0) {\n    easyblocksStitchesInstances.push(createStitches({}));\n  }\n\n  return (\n    <EasyblocksMetadataContext.Provider\n      value={{\n        ...meta,\n        stitches: easyblocksStitchesInstances[0],\n      }}\n    >\n      {children}\n    </EasyblocksMetadataContext.Provider>\n  );\n};\n\nfunction useEasyblocksMetadata() {\n  const context = useContext(EasyblocksMetadataContext);\n\n  if (!context) {\n    throw new Error(\n      \"useEasyblocksMetadata must be used within a EasyblocksMetadataProvider\"\n    );\n  }\n\n  return context;\n}\n\nexport { EasyblocksMetadataProvider, useEasyblocksMetadata };\n"],"names":["EasyblocksMetadataProvider","children","value"],"mappings":";;;;;;AAOA;AASMA;;;AAEJC;AACF;AACE;AACA;;AAEA;AAEA;AAEIC;AACE;;AAEF;AAAE;AAKR;AAEA;AACE;;AAGE;AAGF;AAEA;AACF;;"}