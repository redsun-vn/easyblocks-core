{"version":3,"file":"_internals.js","sources":["../../src/utils/array/last.ts","../../src/utils/object/keys.ts","../../src/compiler/duplicateConfig.ts","../../src/compiler/builtins/$richText/$richText.constants.ts","../../src/compiler/builtins/$richText/getAbsoluteRichTextPartPath.ts","../../src/compiler/builtins/$richText/utils/convertEditorValueToRichTextElements.ts","../../src/compiler/builtins/$richText/utils/getFocusedRichTextPartsConfigPaths.ts","../../src/compiler/builtins/$richText/richTextEditorActions.ts","../../src/compiler/builtins/$richText/utils/convertRichTextElementsToEditorValue.ts","../../src/compiler/builtins/$richText/withEasyblocks.ts","../../src/compiler/builtins/$richText/utils/createTemporaryEditor.ts","../../src/compiler/builtins/$richText/utils/traverseCompiledRichTextComponentConfig.ts","../../src/compiler/builtins/$richText/utils/extractElementsFromCompiledComponents.ts","../../src/compiler/builtins/$richText/utils/extractTextPartsFromCompiledComponents.ts","../../src/compiler/builtins/$richText/utils/parseRichTextPartConfigPath.ts","../../src/compiler/builtins/$richText/utils/getEditorSelectionFromFocusedFields.ts","../../src/compiler/builtins/$richText/utils/getFocusedFieldsFromSlateSelection.ts","../../src/compiler/builtins/$richText/utils/stripRichTextTextPartSelection.ts","../../src/compiler/builtins/$richText/utils/getRichTextComponentConfigFragment.ts","../../src/compiler/builtins/$richText/$richText.editor.tsx","../../src/compiler/builtins/useTextValue.ts","../../src/compiler/builtins/$text/InlineTextarea.tsx","../../src/compiler/builtins/$text/$text.editor.tsx","../../src/compiler/builtins/$text/buildText.ts","../../src/compiler/schema/buttonSchemaProps.ts","../../src/testUtils.ts"],"sourcesContent":["function last<T extends Array<any>>(collection: T): T[number] {\r\n  return collection[collection.length - 1];\r\n}\r\n\r\nexport { last };\r\n","/**\r\n * `Object.keys` is badly typed for its reasons and this function just fixes it.\r\n * https://stackoverflow.com/questions/55012174/why-doesnt-object-keys-return-a-keyof-type-in-typescript\r\n */\r\nfunction keys<T extends object>(o: T): Array<keyof T> {\r\n  return Object.keys(o) as unknown as Array<keyof T>;\r\n}\r\n\r\nexport { keys };\r\n","import { deepClone, uniqueId } from \"@/utils\";\r\nimport { NoCodeComponentEntry } from \"../types\";\r\nimport { configTraverse } from \"./configTraverse\";\r\nimport { traverseComponents } from \"./traverseComponents\";\r\nimport { CompilationContextType } from \"./types\";\r\n\r\nexport function duplicateConfig<\r\n  ConfigType extends NoCodeComponentEntry = NoCodeComponentEntry\r\n>(inputConfig: ConfigType, compilationContext: CompilationContextType) {\r\n  // deep copy first\r\n  const config = deepClone(inputConfig);\r\n\r\n  // refresh component ids\r\n  traverseComponents(config, compilationContext, ({ componentConfig }) => {\r\n    componentConfig._id = uniqueId();\r\n  });\r\n\r\n  // every text must get new local id\r\n  configTraverse(config, compilationContext, ({ value, schemaProp }) => {\r\n    if (schemaProp.type === \"text\") {\r\n      value.id = \"local.\" + uniqueId();\r\n    }\r\n  });\r\n\r\n  return config;\r\n}\r\n","export const RICH_TEXT_CONFIG_SYNC_THROTTLE_TIMEOUT = 150;\r\nexport const RICH_TEXT_FOCUSED_FIELDS_SYNC_THROTTLE_TIMEOUT = 100;\r\n","function getAbsoluteRichTextPartPath(\r\n  relativeRichTextPartPath: string,\r\n  richTextPath: string,\r\n  locale: string\r\n) {\r\n  return `${richTextPath}.elements.${locale}.${relativeRichTextPartPath}`;\r\n}\r\n\r\nexport { getAbsoluteRichTextPartPath };\r\n","import { cleanString } from \"@/utils\";\r\nimport { Element } from \"slate\";\r\nimport type {\r\n  BlockElement,\r\n  BulletedList,\r\n  ListItemElement,\r\n  NumberedList,\r\n  ParagraphElement,\r\n  TextLineElement,\r\n} from \"../$richText.types\";\r\nimport type { RichTextBlockElementComponentConfig } from \"../$richTextBlockElement/$richTextBlockElement\";\r\nimport type { RichTextLineElementComponentConfig } from \"../$richTextLineElement/$richTextLineElement\";\r\nimport {\r\n  buildRichTextBlockElementComponentConfig,\r\n  buildRichTextLineElementComponentConfig,\r\n  buildRichTextPartComponentConfig,\r\n} from \"../builders\";\r\n\r\nfunction convertEditorValueToRichTextElements(\r\n  editorValue: Array<BlockElement>\r\n): Array<RichTextBlockElementComponentConfig> {\r\n  return editorValue.map((blockElement) => {\r\n    if (Element.isElementType<BulletedList>(blockElement, \"bulleted-list\")) {\r\n      return convertEditorListElementToRichTextListBlockElement<BulletedList>(\r\n        \"bulleted-list\",\r\n        blockElement\r\n      );\r\n    }\r\n\r\n    if (Element.isElementType<NumberedList>(blockElement, \"numbered-list\")) {\r\n      return convertEditorListElementToRichTextListBlockElement<NumberedList>(\r\n        \"numbered-list\",\r\n        blockElement\r\n      );\r\n    }\r\n\r\n    if (Element.isElementType<ParagraphElement>(blockElement, \"paragraph\")) {\r\n      return convertEditorParagraphElementToRichTextParagraphBlockElement(\r\n        blockElement\r\n      );\r\n    }\r\n\r\n    throw new Error(\"Unknown block element\");\r\n  });\r\n}\r\n\r\nfunction convertEditorElementToRichTextLineElement(\r\n  editorElement: TextLineElement | ListItemElement\r\n): RichTextLineElementComponentConfig {\r\n  const lineElement = buildRichTextLineElementComponentConfig({\r\n    elements: editorElement.children.map((child) => {\r\n      return buildRichTextPartComponentConfig({\r\n        value: cleanString(child.text),\r\n        color: child.color,\r\n        font: child.font,\r\n        id: child.id,\r\n        TextWrapper: child.TextWrapper,\r\n      });\r\n    }),\r\n  });\r\n  lineElement._id = editorElement.id;\r\n\r\n  return lineElement;\r\n}\r\n\r\nfunction convertEditorListElementToRichTextListBlockElement<\r\n  ListElement extends BulletedList | NumberedList\r\n>(\r\n  type: \"bulleted-list\" | \"numbered-list\",\r\n  editorElement: ListElement\r\n): RichTextBlockElementComponentConfig {\r\n  const listBlockElement = buildRichTextBlockElementComponentConfig(\r\n    type,\r\n    editorElement.children.map((child) => {\r\n      return convertEditorElementToRichTextLineElement(child);\r\n    })\r\n  );\r\n  listBlockElement._id = editorElement.id;\r\n\r\n  return listBlockElement;\r\n}\r\n\r\nfunction convertEditorParagraphElementToRichTextParagraphBlockElement(\r\n  editorElement: ParagraphElement\r\n): RichTextBlockElementComponentConfig {\r\n  const paragraphBlockElement = buildRichTextBlockElementComponentConfig(\r\n    \"paragraph\",\r\n    editorElement.children.map((child) => {\r\n      return convertEditorElementToRichTextLineElement(child);\r\n    })\r\n  );\r\n  paragraphBlockElement._id = editorElement.id;\r\n\r\n  return paragraphBlockElement;\r\n}\r\n\r\nexport { convertEditorValueToRichTextElements };\r\n","import { Editor, Path, Range, Text } from \"slate\";\r\n\r\nfunction getFocusedRichTextPartsConfigPaths(editor: Editor) {\r\n  if (editor.selection !== null) {\r\n    const isBackward = Range.isBackward(editor.selection);\r\n    const anchorProperty = isBackward ? \"focus\" : \"anchor\";\r\n    const focusProperty = isBackward ? \"anchor\" : \"focus\";\r\n    const anchor = editor.selection[anchorProperty];\r\n    const focus = editor.selection[focusProperty];\r\n\r\n    const selectedTextNodes = Array.from(\r\n      Editor.nodes<Text>(editor, {\r\n        match: Text.isText,\r\n      })\r\n    );\r\n\r\n    if (selectedTextNodes.length === 1) {\r\n      const range = {\r\n        start: anchor.offset,\r\n        end: focus.offset,\r\n      };\r\n\r\n      const [textNode, textPath] = selectedTextNodes[0];\r\n\r\n      return [buildFocusedRichTextPartConfigPath(textNode, textPath, range)];\r\n    }\r\n\r\n    const focusedRichTextPartsConfigPaths = selectedTextNodes\r\n      .map(([textNode, textPath], textEntryIndex) => {\r\n        if (textNode.text === \"\") {\r\n          return null;\r\n        }\r\n\r\n        let range: { start: number; end: number } | null = null;\r\n\r\n        if (textEntryIndex === 0) {\r\n          range = {\r\n            start: anchor.offset,\r\n            end: textNode.text.length,\r\n          };\r\n        }\r\n\r\n        if (textEntryIndex === selectedTextNodes.length - 1) {\r\n          range = {\r\n            start: 0,\r\n            end: focus.offset,\r\n          };\r\n        }\r\n\r\n        return buildFocusedRichTextPartConfigPath(textNode, textPath, range);\r\n      })\r\n      .filter<string>((configPath): configPath is string => {\r\n        return configPath !== null;\r\n      });\r\n\r\n    return focusedRichTextPartsConfigPaths;\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nfunction buildFocusedRichTextPartConfigPath(\r\n  textNode: Text,\r\n  path: Path,\r\n  range: { start: number; end: number } | null\r\n) {\r\n  let focusedRichTextPartConfigPath = path.join(\".elements.\");\r\n\r\n  if (\r\n    range !== null &&\r\n    (isPartialSelection(range, textNode) || isCaretSelection(range))\r\n  ) {\r\n    focusedRichTextPartConfigPath += `.{${range.start},${range.end}}`;\r\n  }\r\n\r\n  return focusedRichTextPartConfigPath;\r\n}\r\n\r\nfunction isPartialSelection(\r\n  range: { start: number; end: number },\r\n  textNode: Text\r\n) {\r\n  return range.end - range.start !== textNode.text.length;\r\n}\r\n\r\nfunction isCaretSelection(range: { start: number; end: number }) {\r\n  return range.end - range.start === 0;\r\n}\r\n\r\nexport { getFocusedRichTextPartsConfigPaths };\r\n","import { nonNullable } from \"@/utils\";\r\nimport { BaseRange, Editor, Node, Range, Text, Transforms } from \"slate\";\r\nimport { SetNonNullable } from \"type-fest\";\r\nimport { RichTextComponentConfig } from \"./$richText\";\r\nimport { BlockElement } from \"./$richText.types\";\r\nimport { RichTextPartComponentConfig } from \"./$richTextPart/$richTextPart\";\r\nimport { convertEditorValueToRichTextElements } from \"./utils/convertEditorValueToRichTextElements\";\r\nimport { getFocusedRichTextPartsConfigPaths } from \"./utils/getFocusedRichTextPartsConfigPaths\";\r\n\r\ntype SelectedEditor = SetNonNullable<Editor, \"selection\">;\r\n\r\nfunction isEditorSelection(editor: Editor): editor is SelectedEditor {\r\n  return editor.selection !== null;\r\n}\r\n\r\nfunction updateSelection<\r\n  T extends keyof Omit<\r\n    RichTextPartComponentConfig,\r\n    \"_id\" | \"_component\" | \"value\"\r\n  >\r\n>(\r\n  editor: Editor,\r\n  key: T,\r\n  ...values: Array<RichTextPartComponentConfig[T]>\r\n):\r\n  | {\r\n    elements: RichTextComponentConfig[\"elements\"][string];\r\n    focusedRichTextParts: Array<string>;\r\n  }\r\n  | undefined {\r\n  if (!isEditorSelection(editor)) {\r\n    return;\r\n  }\r\n\r\n  const isSelectionCollapsed = Range.isCollapsed(editor.selection);\r\n\r\n  if (values.length === 1) {\r\n    if (key === \"TextWrapper\" && isSelectionCollapsed) {\r\n      expandCurrentSelectionToWholeTextPart(editor);\r\n    }\r\n\r\n    // If `values` contains one element, we want to apply this value to all text nodes.\r\n    Editor.addMark(editor, key, values[0]);\r\n\r\n    if (key === \"TextWrapper\") {\r\n      if (values[0].length > 0) {\r\n        const firstSelectedNodeEntry = Node.first(\r\n          editor,\r\n          editor.selection.anchor.path\r\n        );\r\n\r\n        const lastSelectedNodeEntry = Node.last(\r\n          editor,\r\n          editor.selection.focus.path\r\n        );\r\n\r\n        if (Text.isText(firstSelectedNodeEntry[0])) {\r\n          const firstSelectedNode = firstSelectedNodeEntry[0];\r\n          const lastSelectedNode = lastSelectedNodeEntry[0];\r\n\r\n          if (firstSelectedNode !== lastSelectedNode) {\r\n            Transforms.setNodes(\r\n              editor,\r\n              {\r\n                color: firstSelectedNode.color,\r\n                font: firstSelectedNode.font,\r\n              },\r\n              {\r\n                match: Text.isText,\r\n              }\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    // If `values` contains multiple values, we want to update each selected text node separately with its\r\n    // corresponding value. To do that, we need to obtain selection range for each selected text node\r\n    // and apply correct value.\r\n    const selectedTextNodeEntries = Array.from(\r\n      Editor.nodes<Text>(editor, {\r\n        match: Text.isText,\r\n      })\r\n    );\r\n\r\n    const selectedTextNodesRanges = selectedTextNodeEntries\r\n      .map(([, textNodePath]) => {\r\n        return Range.intersection(\r\n          editor.selection,\r\n          Editor.range(editor, textNodePath)\r\n        );\r\n      })\r\n      .filter<BaseRange>(nonNullable());\r\n\r\n    Editor.withoutNormalizing(editor, () => {\r\n      selectedTextNodesRanges.reverse().forEach((range, index) => {\r\n        Transforms.setNodes(\r\n          editor,\r\n          {\r\n            [key]: values[index],\r\n          },\r\n          {\r\n            at: range,\r\n            match: Text.isText,\r\n            split: true,\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  const richTextElements = convertEditorValueToRichTextElements(\r\n    editor.children as Array<BlockElement>\r\n  );\r\n\r\n  const newFocusedRichTextParts = getFocusedRichTextPartsConfigPaths(editor);\r\n\r\n  return {\r\n    elements: richTextElements,\r\n    focusedRichTextParts: newFocusedRichTextParts,\r\n  };\r\n}\r\n\r\nexport { updateSelection };\r\n\r\nfunction expandCurrentSelectionToWholeTextPart(editor: Editor) {\r\n  const textPartPath = Editor.path(editor, editor.selection!.anchor.path);\r\n\r\n  Transforms.setSelection(editor, {\r\n    anchor: Editor.start(editor, textPartPath),\r\n    focus: Editor.end(editor, textPartPath),\r\n  });\r\n}\r\n","import { uniqueId } from \"@/utils\";\r\nimport type { Text } from \"slate\";\r\nimport type { RichTextComponentConfig } from \"../$richText\";\r\nimport type { BlockElement } from \"../$richText.types\";\r\nimport type { RichTextBlockElementComponentConfig } from \"../$richTextBlockElement/$richTextBlockElement\";\r\nimport type { RichTextPartComponentConfig } from \"../$richTextPart/$richTextPart\";\r\n\r\nfunction convertRichTextElementsToEditorValue(\r\n  richTextElements: RichTextComponentConfig[\"elements\"][string] | undefined\r\n): Array<BlockElement> {\r\n  if (!richTextElements || richTextElements.length === 0) {\r\n    return getPlaceholderRichTextElements();\r\n  }\r\n\r\n  return richTextElements.map((richTextBlockElementComponentConfig) => {\r\n    return convertRichTextBlockElementComponentConfigToEditorElement(\r\n      richTextBlockElementComponentConfig\r\n    );\r\n  });\r\n}\r\n\r\nexport { convertRichTextElementsToEditorValue };\r\n\r\nfunction convertRichTextPartComponentConfigToEditorText(\r\n  richTextPartComponentConfig: RichTextPartComponentConfig\r\n): Text {\r\n  return {\r\n    color: richTextPartComponentConfig.color,\r\n    font: richTextPartComponentConfig.font,\r\n    id: richTextPartComponentConfig._id,\r\n    text: richTextPartComponentConfig.value,\r\n    TextWrapper: richTextPartComponentConfig.TextWrapper,\r\n  };\r\n}\r\n\r\nfunction convertRichTextBlockElementComponentConfigToEditorElement(\r\n  blockElementComponentConfig: RichTextBlockElementComponentConfig\r\n): BlockElement {\r\n  if (\r\n    blockElementComponentConfig.type === \"bulleted-list\" ||\r\n    blockElementComponentConfig.type === \"numbered-list\"\r\n  ) {\r\n    return {\r\n      id: blockElementComponentConfig._id,\r\n      type: blockElementComponentConfig.type,\r\n      children: blockElementComponentConfig.elements.map(\r\n        (lineElementComponentConfig) => {\r\n          return {\r\n            type: \"list-item\",\r\n            id: lineElementComponentConfig._id,\r\n            children: lineElementComponentConfig.elements.map(\r\n              (childComponentConfig) => {\r\n                return convertRichTextPartComponentConfigToEditorText(\r\n                  childComponentConfig\r\n                );\r\n              }\r\n            ),\r\n          };\r\n        }\r\n      ),\r\n    };\r\n  }\r\n\r\n  return {\r\n    id: blockElementComponentConfig._id,\r\n    type: blockElementComponentConfig.type,\r\n    children: blockElementComponentConfig.elements.map(\r\n      (lineElementComponentConfig) => {\r\n        return {\r\n          type: \"text-line\",\r\n          id: lineElementComponentConfig._id,\r\n          children: lineElementComponentConfig.elements.map(\r\n            (childComponentConfig) => {\r\n              return convertRichTextPartComponentConfigToEditorText(\r\n                childComponentConfig\r\n              );\r\n            }\r\n          ),\r\n        };\r\n      }\r\n    ),\r\n  };\r\n}\r\n\r\nfunction getPlaceholderRichTextElements(): Array<BlockElement> {\r\n  return [\r\n    {\r\n      id: uniqueId(),\r\n      type: \"paragraph\",\r\n      children: [\r\n        {\r\n          id: uniqueId(),\r\n          type: \"text-line\",\r\n          children: [\r\n            {\r\n              id: uniqueId(),\r\n              color: {\r\n                tokenId: \"black\",\r\n                value: \"black\",\r\n                widgetId: \"@easyblocks/color\",\r\n              },\r\n              font: {\r\n                tokenId: \"$body\",\r\n                value: \"\",\r\n              },\r\n              text: \"\",\r\n              TextWrapper: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n","import { deepCompare, keys, uniqueId } from \"@/utils\";\r\nimport {\r\n  Editor,\r\n  NodeEntry,\r\n  Element as SlateElement,\r\n  Node as SlateNode,\r\n  Text,\r\n  Transforms,\r\n} from \"slate\";\r\nimport { RichTextBlockElementType } from \"./$richTextBlockElement/$richTextBlockElement\";\r\n\r\ntype ComparableText = Pick<Text, \"color\" | \"font\">;\r\n\r\n/**\r\n * Tracks which ids were used during current normalization run\r\n */\r\nconst USED_IDS = new Set<string>();\r\n\r\n/**\r\n * Keeps track what was the previous id before generating the unique id. This is needed because Slate rerenders before\r\n * our config updates and it wouldn't know which compiled component to render.\r\n */\r\nexport const NORMALIZED_IDS_TO_IDS = new Map<string, string>();\r\n\r\nfunction withEasyblocks(editor: Editor): Editor {\r\n  const { /*insertText,*/ normalizeNode } = editor;\r\n\r\n  // editor.insertText = (text) => {\r\n  //   // Verify if the current selection is placed at the end of an inline element. If yes, set the selection to start of\r\n  //   // the next element before adding new text. This allows to break out from the inline element if it's placed at the end of line.\r\n  //   if (editor.selection && Range.isCollapsed(editor.selection)) {\r\n  //     const selectedNodeParent = Editor.parent(\r\n  //       editor,\r\n  //       editor.selection.focus.path\r\n  //     );\r\n\r\n  //     if (selectedNodeParent) {\r\n  //       const [parentNode, parentNodePath] = selectedNodeParent;\r\n\r\n  //       if (SlateElement.isElement(parentNode) && editor.isInline(parentNode)) {\r\n  //         const isCursorSetAtTheEnd = Editor.isEnd(\r\n  //           editor,\r\n  //           editor.selection.focus,\r\n  //           parentNodePath\r\n  //         );\r\n\r\n  //         const nodePointAfterInlineElement = Editor.after(\r\n  //           editor,\r\n  //           parentNodePath\r\n  //         );\r\n\r\n  //         if (isCursorSetAtTheEnd && nodePointAfterInlineElement) {\r\n  //           Transforms.setSelection(editor, {\r\n  //             anchor: nodePointAfterInlineElement,\r\n  //             focus: nodePointAfterInlineElement,\r\n  //           });\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   insertText(text);\r\n  // };\r\n\r\n  editor.normalizeNode = (entry) => {\r\n    // When copying text content from content editable element, Slate wraps pasted content into top most element.\r\n    // We need to unwrap each block element that is nested within another block element.\r\n    if (unwrapBlockElementsNestedWithinBlockElement(editor, entry)) {\r\n      return;\r\n    }\r\n\r\n    // Slate by default compares text elements and merges them, but to compare them it uses strict equality comparison algorithm.\r\n    // We need to compare them using our own algorithm.\r\n    if (mergeVisuallyTheSameOrEmptyTextNodes(editor, entry)) {\r\n      return;\r\n    }\r\n\r\n    // if (normalizeEmptyTextNodesAfterInlineElements(editor, entry)) {\r\n    //   return;\r\n    // }\r\n\r\n    // Rich text and its elements contains collections. Each item of collection should have unique id.\r\n    if (updateNonUniqueIds(editor, entry)) {\r\n      return;\r\n    }\r\n\r\n    // Slate normalizes fields from deepest to lowest. The lowest element is editor element which has empty path.\r\n    if (entry[1].length === 0) {\r\n      USED_IDS.clear();\r\n    }\r\n\r\n    normalizeNode(entry);\r\n  };\r\n\r\n  return editor;\r\n}\r\n\r\nexport { withEasyblocks };\r\n\r\nfunction unwrapBlockElementsNestedWithinBlockElement(\r\n  editor: Editor,\r\n  entry: NodeEntry<SlateNode>\r\n): boolean {\r\n  const [node, path] = entry;\r\n\r\n  if (\r\n    SlateElement.isElement(node) &&\r\n    // This cast is fine since `RichTextBlockElementType` overlaps with type of `node.type`.\r\n    [\"bulleted-list\", \"numbered-list\", \"paragraph\"].includes(\r\n      node.type as RichTextBlockElementType\r\n    )\r\n  ) {\r\n    const nodeParent = SlateNode.parent(editor, path);\r\n\r\n    if (SlateElement.isElement(nodeParent)) {\r\n      if (nodeParent.type === node.type) {\r\n        Transforms.unwrapNodes(editor, { at: path });\r\n        return true;\r\n      }\r\n\r\n      // For now there is only one case where block element can be nested within block element of different type,\r\n      // it can happen while pasting content from one $richText to another. We want to keep the type of pasted content\r\n      // so instead of unwrapping nodes, we lift them one level up.\r\n      if (\r\n        nodeParent.type !== node.type &&\r\n        [\"bulleted-list\", \"numbered-list\", \"paragraph\"].includes(\r\n          nodeParent.type as RichTextBlockElementType\r\n        )\r\n      ) {\r\n        Transforms.liftNodes(editor, { at: path });\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction updateNonUniqueIds(\r\n  editor: Editor,\r\n  entry: NodeEntry<SlateNode>\r\n): boolean {\r\n  const [node, path] = entry;\r\n\r\n  if (Text.isText(node) || SlateElement.isElement(node)) {\r\n    if (USED_IDS.has(node.id)) {\r\n      const newId = uniqueId();\r\n      NORMALIZED_IDS_TO_IDS.set(newId, node.id);\r\n      Transforms.setNodes(\r\n        editor,\r\n        {\r\n          id: newId,\r\n        },\r\n        {\r\n          at: path,\r\n          match: (n) =>\r\n            (Text.isText(n) || SlateElement.isElement(n)) && n.id === node.id,\r\n        }\r\n      );\r\n      return true;\r\n    } else {\r\n      USED_IDS.add(node.id);\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction mergeVisuallyTheSameOrEmptyTextNodes(\r\n  editor: Editor,\r\n  entry: NodeEntry<SlateNode>\r\n): boolean {\r\n  const [node, path] = entry;\r\n\r\n  if (\r\n    SlateElement.isElement(node) &&\r\n    (node.type === \"text-line\" || node.type === \"list-item\")\r\n  ) {\r\n    const textLineChildren = Array.from(SlateNode.children(editor, path));\r\n\r\n    if (textLineChildren.length > 1) {\r\n      for (\r\n        let childIndex = 0;\r\n        childIndex < textLineChildren.length - 1;\r\n        childIndex++\r\n      ) {\r\n        const [currentChildNode, currentChildPath] =\r\n          textLineChildren[childIndex];\r\n        const [nextChildNode, nextChildPath] = textLineChildren[childIndex + 1];\r\n\r\n        if (Text.isText(currentChildNode) && Text.isText(nextChildNode)) {\r\n          if (compareText(currentChildNode, nextChildNode)) {\r\n            Transforms.mergeNodes(editor, {\r\n              at: nextChildPath,\r\n              match: (node) => Text.isText(node),\r\n            });\r\n\r\n            return true;\r\n          }\r\n\r\n          if (\r\n            nextChildNode.text.trim() === \"\" &&\r\n            childIndex + 1 < textLineChildren.length - 1 &&\r\n            currentChildNode.TextWrapper.length === 0\r\n          ) {\r\n            Transforms.mergeNodes(editor, {\r\n              at: nextChildPath,\r\n              match: (node) => Text.isText(node),\r\n            });\r\n\r\n            return true;\r\n          }\r\n\r\n          // `Transforms.mergeNodes` always merges node/nodes at given position into PREVIOUS node.\r\n          // In this case, we want to merge node at current position into next one.\r\n          if (\r\n            currentChildNode.text.trim() === \"\" &&\r\n            nextChildNode !== undefined\r\n          ) {\r\n            Transforms.setNodes(\r\n              editor,\r\n              {\r\n                color: nextChildNode.color,\r\n                font: nextChildNode.font,\r\n              },\r\n              {\r\n                at: currentChildPath,\r\n                match: (node) => Text.isText(node),\r\n              }\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// This function might be useful in the future, but right now it's not needed.\r\n\r\n// Slate normalization rules states that an inline element cannot be first or last child of block element.\r\n// Slate during its own normalization will add empty Text nodes before or/and after inline element.\r\n// Those Text nodes will be missing properties we add during constructing Slate value based on Shopstory config\r\n// thus it will make compilation error because of missing schema prop values.\r\n// function normalizeEmptyTextNodesAfterInlineElements(\r\n//   editor: Editor,\r\n//   entry: NodeEntry<SlateNode>\r\n// ): boolean {\r\n//   const [node, path] = entry;\r\n\r\n//   if (\r\n//     SlateElement.isElement(node) &&\r\n//     (node.type === \"text-line\" || node.type === \"list-item\")\r\n//   ) {\r\n//     for (let index = 0; index < node.children.length; index++) {\r\n//       const childNode = node.children[index];\r\n//       const previousNode = node.children[index - 1];\r\n//       const nextNode = node.children[index + 1];\r\n\r\n//       if (\r\n//         previousNode &&\r\n//         nextNode &&\r\n//         isElementInlineWrapperElement(previousNode) &&\r\n//         isElementInlineWrapperElement(nextNode)\r\n//       ) {\r\n//         if (Text.isText(childNode) && childNode.text === \"\") {\r\n//           Transforms.removeNodes(editor, {\r\n//             at: [...path, index],\r\n//           });\r\n//           return true;\r\n//         }\r\n//       }\r\n\r\n//       if (\r\n//         childNode &&\r\n//         nextNode &&\r\n//         isElementInlineWrapperElement(childNode) &&\r\n//         isElementInlineWrapperElement(nextNode)\r\n//       ) {\r\n//         const nextNodePath = [...path, index + 1];\r\n\r\n//         Transforms.mergeNodes(editor, {\r\n//           at: nextNodePath,\r\n//         });\r\n\r\n//         return true;\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   return false;\r\n// }\r\n\r\nfunction filterNonComparableProperties(obj: Text): ComparableText {\r\n  return keys(obj)\r\n    .filter<keyof ComparableText>((key): key is keyof ComparableText =>\r\n      [\"color\", \"font\", \"TextWrapper\"].includes(key)\r\n    )\r\n    .reduce((filteredObject, currentKey) => {\r\n      filteredObject[currentKey] = obj[currentKey];\r\n      return filteredObject;\r\n    }, {} as ComparableText);\r\n}\r\n\r\nfunction compareText(text1: Text, text2: Text): boolean {\r\n  let areEqual = true;\r\n\r\n  const part1Keys = keys(filterNonComparableProperties(text1));\r\n  const part2Keys = keys(filterNonComparableProperties(text2));\r\n\r\n  if (part1Keys.length !== part2Keys.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let index = 0; index < part1Keys.length; index++) {\r\n    const key = part1Keys[index];\r\n    const part1Value = text1[key];\r\n    const part2Value = text2[key];\r\n    const areValuesEqual = deepCompare(part1Value, part2Value);\r\n\r\n    if (!areValuesEqual) {\r\n      areEqual = false;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return areEqual;\r\n}\r\n","import { createEditor, Editor } from \"slate\";\r\nimport { withReact } from \"slate-react\";\r\nimport { withEasyblocks } from \"../withEasyblocks\";\r\n\r\n// Slate's transforms methods mutates given editor instance.\r\n// By creating temporary editor instance we can apply all transformations without\r\n// touching original editor and read result from `temporaryEditor.children`\r\nfunction createTemporaryEditor(\r\n  editor: Pick<Editor, \"children\" | \"selection\">\r\n): Editor {\r\n  const temporaryEditor = withEasyblocks(withReact(createEditor()));\r\n  temporaryEditor.children = [...editor.children];\r\n  temporaryEditor.selection = editor.selection ? { ...editor.selection } : null;\r\n  return temporaryEditor;\r\n}\r\n\r\nexport { createTemporaryEditor };\r\n","import type { RichTextProps } from \"../$richText.editor\";\r\nimport type { RichTextBlockElementCompiledComponentConfig } from \"../$richTextBlockElement/$richTextBlockElement\";\r\nimport type { RichTextLineElementCompiledComponentConfig } from \"../$richTextLineElement/$richTextLineElement\";\r\nimport type { RichTextPartCompiledComponentConfig } from \"../$richTextPart/$richTextPart\";\r\n\r\nfunction traverseCompiledRichTextComponentConfig(\r\n  config: RichTextProps,\r\n  callback: (\r\n    compiledConfig:\r\n      | RichTextBlockElementCompiledComponentConfig\r\n      | RichTextLineElementCompiledComponentConfig\r\n      | RichTextPartCompiledComponentConfig\r\n  ) => void\r\n): void {\r\n  config.elements.forEach((reactElement) => {\r\n    callback(reactElement.props.compiled);\r\n    reactElement.props.compiled.components.elements.forEach(\r\n      (compiledLineElement) => {\r\n        callback(compiledLineElement);\r\n        compiledLineElement.components.elements.forEach((compiledTextPart) => {\r\n          callback(compiledTextPart);\r\n        });\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\nexport { traverseCompiledRichTextComponentConfig };\r\n","import type { RichTextProps } from \"../$richText.editor\";\r\nimport type { RichTextBlockElementCompiledComponentConfig } from \"../$richTextBlockElement/$richTextBlockElement\";\r\nimport type { RichTextLineElementCompiledComponentConfig } from \"../$richTextLineElement/$richTextLineElement\";\r\nimport { traverseCompiledRichTextComponentConfig } from \"./traverseCompiledRichTextComponentConfig\";\r\n\r\nfunction extractElementsFromCompiledComponents(\r\n  compiledRichText: RichTextProps\r\n): Array<\r\n  | RichTextBlockElementCompiledComponentConfig\r\n  | RichTextLineElementCompiledComponentConfig\r\n> {\r\n  const extractedCompiledElementComponents: ReturnType<\r\n    typeof extractElementsFromCompiledComponents\r\n  > = [];\r\n\r\n  traverseCompiledRichTextComponentConfig(\r\n    compiledRichText,\r\n    (compiledConfig) => {\r\n      if (\r\n        compiledConfig._component === \"@easyblocks/rich-text-block-element\" ||\r\n        compiledConfig._component === \"@easyblocks/rich-text-line-element\"\r\n      ) {\r\n        extractedCompiledElementComponents.push(\r\n          compiledConfig as\r\n            | RichTextBlockElementCompiledComponentConfig\r\n            | RichTextLineElementCompiledComponentConfig\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  return extractedCompiledElementComponents;\r\n}\r\n\r\nexport { extractElementsFromCompiledComponents };\r\n","import type { RichTextProps } from \"../$richText.editor\";\r\nimport type { RichTextPartCompiledComponentConfig } from \"../$richTextPart/$richTextPart\";\r\nimport { traverseCompiledRichTextComponentConfig } from \"./traverseCompiledRichTextComponentConfig\";\r\n\r\nfunction extractTextPartsFromCompiledComponents(\r\n  compiledRichText: RichTextProps\r\n): Array<RichTextPartCompiledComponentConfig> {\r\n  const extractedTextPartComponents: Array<RichTextPartCompiledComponentConfig> =\r\n    [];\r\n\r\n  traverseCompiledRichTextComponentConfig(\r\n    compiledRichText,\r\n    (compiledConfig) => {\r\n      if (compiledConfig._component === \"@easyblocks/rich-text-part\") {\r\n        extractedTextPartComponents.push(\r\n          compiledConfig as RichTextPartCompiledComponentConfig\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  return extractedTextPartComponents;\r\n}\r\n\r\nexport { extractTextPartsFromCompiledComponents };\r\n","interface ParseRichTextPartConfigPathResult {\r\n  path: Array<number>;\r\n  range: null | [number, number];\r\n}\r\n\r\nfunction parseFocusedRichTextPartConfigPath(\r\n  focusedRichTextPartConfigPath: string\r\n): ParseRichTextPartConfigPathResult {\r\n  const focusedRichTextPartConfigPathMatch =\r\n    focusedRichTextPartConfigPath.match(/\\d+(\\.elements\\.\\d+){2,3}/);\r\n\r\n  if (focusedRichTextPartConfigPathMatch === null) {\r\n    throw new Error(\"Invalid @easyblocks/rich-text-part config path\");\r\n  }\r\n\r\n  const [richTextPartConfigPath] = focusedRichTextPartConfigPathMatch;\r\n  const path = richTextPartConfigPath\r\n    .split(\".elements.\")\r\n    .map((index) => +index);\r\n\r\n  const rangeMatch = focusedRichTextPartConfigPath.match(/\\.\\{(\\d+),(\\d+)\\}$/);\r\n  const range: ParseRichTextPartConfigPathResult[\"range\"] =\r\n    rangeMatch !== null ? [+rangeMatch[1], +rangeMatch[2]] : null;\r\n\r\n  return {\r\n    path: path,\r\n    range,\r\n  };\r\n}\r\n\r\nexport { parseFocusedRichTextPartConfigPath };\r\nexport type { ParseRichTextPartConfigPathResult };\r\n","import { dotNotationGet, last } from \"@/utils\";\r\nimport type { Selection } from \"slate\";\r\nimport { parseFocusedRichTextPartConfigPath } from \"./parseRichTextPartConfigPath\";\r\n\r\nfunction getEditorSelectionFromFocusedFields(\r\n  focusedFields: Array<string>,\r\n  form: any\r\n): Selection {\r\n  try {\r\n    const anchorFocusedField = focusedFields[0];\r\n    const focusFocusedField = last(focusedFields);\r\n    const parsedAnchorField =\r\n      parseFocusedRichTextPartConfigPath(anchorFocusedField);\r\n    const parsedFocusedField =\r\n      parseFocusedRichTextPartConfigPath(focusFocusedField);\r\n\r\n    if (!parsedAnchorField.path.length || !parsedFocusedField.path.length) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      anchor: {\r\n        offset: parsedAnchorField.range ? parsedAnchorField.range[0] : 0,\r\n        path: parsedAnchorField.path,\r\n      },\r\n      focus: {\r\n        offset: parsedFocusedField.range\r\n          ? parsedFocusedField.range[1]\r\n          : dotNotationGet(form.values, focusFocusedField).value.length,\r\n        path: parsedFocusedField.path,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { getEditorSelectionFromFocusedFields };\r\n","import type { Editor } from \"slate\";\r\nimport { getAbsoluteRichTextPartPath } from \"../getAbsoluteRichTextPartPath\";\r\nimport { getFocusedRichTextPartsConfigPaths } from \"./getFocusedRichTextPartsConfigPaths\";\r\n\r\nfunction getFocusedFieldsFromSlateSelection(\r\n  editor: Editor,\r\n  richTextComponentConfigPath: string,\r\n  locale: string\r\n) {\r\n  if (editor.selection === null) {\r\n    return undefined;\r\n  }\r\n\r\n  const focusedRichTextPartPaths = getFocusedRichTextPartsConfigPaths(editor);\r\n\r\n  const focusedFields = focusedRichTextPartPaths.map((richTextPartPath) =>\r\n    getAbsoluteRichTextPartPath(\r\n      richTextPartPath,\r\n      richTextComponentConfigPath,\r\n      locale\r\n    )\r\n  );\r\n  return focusedFields;\r\n}\r\n\r\nexport { getFocusedFieldsFromSlateSelection };\r\n","/**\r\n * When selecting text within $richText, we keep information about which text parts are selected\r\n * within focused fields. If the text part is partially selected, we add information about the selection.\r\n * This selection has format: \".{textPartCharacterSelectionStartIndex,textPartCharacterSelectionEndIndex}\".\r\n * We often want to query related to selection text part component config and to do that correctly we need to\r\n * strip information about selection.\r\n */\r\nfunction stripRichTextPartSelection(value: string): string {\r\n  return value.replace(/\\.\\{\\d+,\\d+\\}$/g, \"\");\r\n}\r\nexport { stripRichTextPartSelection };\r\n","import {\r\n  dotNotationGet as get,\r\n  dotNotationSet as set,\r\n} from \"@/utils\";\r\nimport { RichTextComponentConfig } from \"../$richText\";\r\nimport { RichTextPartComponentConfig } from \"../$richTextPart/$richTextPart\";\r\nimport { duplicateConfig } from \"../../../duplicateConfig\";\r\nimport { EditorContextType } from \"../../../types\";\r\nimport { parseFocusedRichTextPartConfigPath } from \"./parseRichTextPartConfigPath\";\r\nimport { stripRichTextPartSelection } from \"./stripRichTextTextPartSelection\";\r\n\r\nfunction getRichTextComponentConfigFragment(\r\n  sourceRichTextComponentConfig: RichTextComponentConfig,\r\n  editorContext: EditorContextType\r\n): RichTextComponentConfig & {\r\n  _itemProps?: Record<string, unknown>;\r\n} {\r\n  const { focussedField, form, contextParams } = editorContext;\r\n\r\n  const newRichTextComponentConfig: RichTextComponentConfig = {\r\n    ...sourceRichTextComponentConfig,\r\n    elements: {\r\n      [contextParams.locale]: [],\r\n    },\r\n  };\r\n\r\n  focussedField.forEach((focusedField) => {\r\n    const textPartConfig: RichTextPartComponentConfig = get(\r\n      form.values,\r\n      stripRichTextPartSelection(focusedField)\r\n    );\r\n\r\n    const { path, range } = parseFocusedRichTextPartConfigPath(focusedField);\r\n\r\n    const newTextPartConfig = duplicateConfig(textPartConfig, editorContext);\r\n\r\n    if (range) {\r\n      newTextPartConfig.value = textPartConfig.value.slice(...range);\r\n    }\r\n\r\n    let lastParentConfigPath = `elements.${contextParams.locale}`;\r\n\r\n    path.slice(0, -1).forEach((pathIndex, index) => {\r\n      let currentConfigPath = lastParentConfigPath;\r\n\r\n      if (index === 0) {\r\n        currentConfigPath += `.${pathIndex}`;\r\n      } else {\r\n        const parentConfig = get(\r\n          newRichTextComponentConfig,\r\n          lastParentConfigPath\r\n        );\r\n\r\n        currentConfigPath += `.elements.${Math.min(\r\n          parentConfig.elements.length,\r\n          pathIndex\r\n        )}`;\r\n      }\r\n\r\n      const currentConfig = get(newRichTextComponentConfig, currentConfigPath);\r\n\r\n      if (!currentConfig) {\r\n        const sourceConfigPath =\r\n          lastParentConfigPath +\r\n          (index === 0 ? `.${pathIndex}` : `.elements.${pathIndex}`);\r\n\r\n        const sourceConfig = get(\r\n          sourceRichTextComponentConfig,\r\n          sourceConfigPath\r\n        );\r\n\r\n        const configCopy = {\r\n          ...sourceConfig,\r\n          elements: [],\r\n        };\r\n\r\n        set(newRichTextComponentConfig, currentConfigPath, configCopy);\r\n      }\r\n\r\n      lastParentConfigPath = currentConfigPath;\r\n    });\r\n\r\n    const textPartParentConfig = get(\r\n      newRichTextComponentConfig,\r\n      lastParentConfigPath\r\n    );\r\n\r\n    set(newRichTextComponentConfig, lastParentConfigPath, {\r\n      ...textPartParentConfig,\r\n      elements: [...textPartParentConfig.elements, newTextPartConfig],\r\n    });\r\n  });\r\n\r\n  return newRichTextComponentConfig;\r\n}\r\n\r\nexport { getRichTextComponentConfigFragment };\r\n","\"use client\";\r\nimport { deepClone, deepCompare, dotNotationGet } from \"@/utils\";\r\nimport throttle from \"lodash/throttle\";\r\nimport React, {\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { flushSync } from \"react-dom\";\r\nimport {\r\n  BaseRange,\r\n  Descendant,\r\n  Editor,\r\n  NodeEntry,\r\n  Range,\r\n  Text,\r\n  Transforms,\r\n  createEditor,\r\n} from \"slate\";\r\nimport type {\r\n  RenderElementProps,\r\n  RenderLeafProps,\r\n  RenderPlaceholderProps,\r\n} from \"slate-react\";\r\nimport { Editable, ReactEditor, Slate, withReact } from \"slate-react\";\r\nimport { Box } from \"../../../components/Box/Box\";\r\nimport {\r\n  ComponentBuilder,\r\n  InternalNoCodeComponentProps,\r\n} from \"../../../components/ComponentBuilder/ComponentBuilder\";\r\nimport { RichTextChangedEvent } from \"../../../events\";\r\nimport { getFallbackForLocale } from \"../../../locales\";\r\nimport { responsiveValueFill } from \"../../../responsiveness\";\r\nimport { Devices, ResponsiveValue } from \"../../../types\";\r\nimport { compileBox, getBoxStyles } from \"../../box\";\r\nimport { getDevicesWidths } from \"../../devices\";\r\nimport { duplicateConfig } from \"../../duplicateConfig\";\r\nimport type { RichTextComponentConfig } from \"./$richText\";\r\nimport {\r\n  RICH_TEXT_CONFIG_SYNC_THROTTLE_TIMEOUT,\r\n  RICH_TEXT_FOCUSED_FIELDS_SYNC_THROTTLE_TIMEOUT,\r\n} from \"./$richText.constants\";\r\nimport { Alignment, BlockElement } from \"./$richText.types\";\r\nimport { RichTextBlockElementCompiledComponentConfig } from \"./$richTextBlockElement/$richTextBlockElement\";\r\nimport { RichTextPartComponentConfig } from \"./$richTextPart/$richTextPart\";\r\nimport { RichTextPartClient } from \"./$richTextPart/$richTextPart.client\";\r\nimport { getAbsoluteRichTextPartPath } from \"./getAbsoluteRichTextPartPath\";\r\nimport { updateSelection } from \"./richTextEditorActions\";\r\nimport { convertEditorValueToRichTextElements } from \"./utils/convertEditorValueToRichTextElements\";\r\nimport { convertRichTextElementsToEditorValue } from \"./utils/convertRichTextElementsToEditorValue\";\r\nimport { createTemporaryEditor } from \"./utils/createTemporaryEditor\";\r\nimport { extractElementsFromCompiledComponents } from \"./utils/extractElementsFromCompiledComponents\";\r\nimport { extractTextPartsFromCompiledComponents } from \"./utils/extractTextPartsFromCompiledComponents\";\r\nimport { getEditorSelectionFromFocusedFields } from \"./utils/getEditorSelectionFromFocusedFields\";\r\nimport { getFocusedFieldsFromSlateSelection } from \"./utils/getFocusedFieldsFromSlateSelection\";\r\nimport { getFocusedRichTextPartsConfigPaths } from \"./utils/getFocusedRichTextPartsConfigPaths\";\r\nimport { getRichTextComponentConfigFragment } from \"./utils/getRichTextComponentConfigFragment\";\r\nimport { NORMALIZED_IDS_TO_IDS, withEasyblocks } from \"./withEasyblocks\";\r\n\r\ninterface RichTextProps extends InternalNoCodeComponentProps {\r\n  elements: Array<\r\n    React.ReactElement<{\r\n      compiled: RichTextBlockElementCompiledComponentConfig;\r\n    }>\r\n  >;\r\n  align: ResponsiveValue<Alignment>;\r\n}\r\n\r\nfunction RichTextEditor(props: RichTextProps) {\r\n  const { editorContext } = (window.parent as any).editorWindowAPI;\r\n\r\n  const {\r\n    actions,\r\n    contextParams,\r\n    form,\r\n    focussedField,\r\n    locales,\r\n    setFocussedField,\r\n  } = editorContext;\r\n\r\n  const {\r\n    __easyblocks: {\r\n      path,\r\n      runtime: { resop, stitches, devices },\r\n    },\r\n    align,\r\n  } = props;\r\n\r\n  let richTextConfig: RichTextComponentConfig = dotNotationGet(\r\n    form.values,\r\n    path\r\n  );\r\n\r\n  const [editor] = useState(() => withEasyblocks(withReact(createEditor())));\r\n\r\n  const localizedRichTextElements =\r\n    richTextConfig.elements[contextParams.locale];\r\n\r\n  const fallbackRichTextElements = getFallbackForLocale(\r\n    richTextConfig.elements,\r\n    contextParams.locale,\r\n    locales\r\n  );\r\n\r\n  const richTextElements =\r\n    localizedRichTextElements ?? fallbackRichTextElements;\r\n\r\n  const richTextElementsConfigPath = `${path}.elements.${contextParams.locale}`;\r\n\r\n  const [editorValue, setEditorValue] = useState(() =>\r\n    convertRichTextElementsToEditorValue(richTextElements)\r\n  );\r\n\r\n  // If rich text has no value, we initialize it with default config by updating it during first render\r\n  // This is only possible when we open entry for non main locale without fallback, this is total edge case\r\n  if (richTextElements.length === 0 && !fallbackRichTextElements) {\r\n    // We only want to show rich text for default config within this component, we don't want to update raw content\r\n    // To prevent implicit update of raw content we make a deep copy.\r\n    richTextConfig = deepClone(richTextConfig);\r\n    richTextConfig.elements[contextParams.locale] =\r\n      convertEditorValueToRichTextElements(editorValue);\r\n  }\r\n\r\n  /**\r\n   * Controls the visibility of decoration imitating browser selection of\r\n   * the selected text after the user has blurred the content editable element.\r\n   */\r\n  const [isDecorationActive, setIsDecorationActive] = useState(false);\r\n\r\n  /**\r\n   * Keeps track what caused last change to editor value.\r\n   * This is used in two cases:\r\n   * - text-only changes of editable content shouldn't trigger update of `editor.children` (\"text-input\")\r\n   * - changes from outside of editable content shouldn't trigger writing to editor's history within change callback (\"external\")\r\n   */\r\n  const lastChangeReason = useRef<\"external\" | \"text-input\" | \"paste\">(\r\n    \"text-input\"\r\n  );\r\n\r\n  /**\r\n   * Whether the content editable is enabled or not. We enable it through double click.\r\n   */\r\n  const [isEnabled, setIsEnabled] = useState(false);\r\n  const previousRichTextComponentConfig = useRef<RichTextComponentConfig>();\r\n  const currentSelectionRef = useRef<BaseRange | null>(null);\r\n\r\n  const isConfigChanged = !isConfigEqual(\r\n    previousRichTextComponentConfig.current,\r\n    richTextConfig\r\n  );\r\n\r\n  if (previousRichTextComponentConfig.current && isConfigChanged) {\r\n    if (lastChangeReason.current !== \"paste\") {\r\n      lastChangeReason.current = \"external\";\r\n    }\r\n\r\n    previousRichTextComponentConfig.current = richTextConfig;\r\n    const nextEditorValue =\r\n      convertRichTextElementsToEditorValue(richTextElements);\r\n    // React bails out the render if state setter function is invoked during the render phase.\r\n    // Doing it makes Slate always up-to date with the latest config if it's changed from outside.\r\n    // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\r\n    setEditorValue(nextEditorValue);\r\n    editor.children = nextEditorValue;\r\n\r\n    if (isEnabled) {\r\n      const newEditorSelection = getEditorSelectionFromFocusedFields(\r\n        focussedField,\r\n        form\r\n      );\r\n\r\n      if (isDecorationActive) {\r\n        currentSelectionRef.current = newEditorSelection;\r\n      } else {\r\n        // Slate gives us two methods to update its selection:\r\n        // - `setSelection` updates current selection, so `editor.selection` must be not null\r\n        // - `select` sets the selection, so `editor.selection` must be null\r\n        if (newEditorSelection !== null && editor.selection !== null) {\r\n          Transforms.setSelection(editor, newEditorSelection);\r\n        } else if (newEditorSelection !== null && editor.selection === null) {\r\n          Transforms.select(editor, newEditorSelection);\r\n        } else {\r\n          Transforms.deselect(editor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useLayoutEffect(() => {\r\n    if (\r\n      isDecorationActive &&\r\n      currentSelectionRef.current !== null &&\r\n      !Range.isCollapsed(currentSelectionRef.current)\r\n    ) {\r\n      splitStringNodes(editor, currentSelectionRef.current);\r\n\r\n      return () => {\r\n        unwrapStringNodesContent(editor);\r\n      };\r\n    }\r\n  }, [editor, isDecorationActive, richTextConfig]);\r\n\r\n  const isRichTextActive = focussedField.some((focusedField: any) =>\r\n    focusedField.startsWith(path)\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    // When rich text becomes inactive we want to restore all original [data-slate-string] nodes\r\n    // by removing all span wrappers that we added to show the mocked browser selection.\r\n    if (!isRichTextActive) {\r\n      unwrapStringNodesContent(editor);\r\n    }\r\n  }, [editor, isRichTextActive]);\r\n\r\n  useEffect(() => {\r\n    // We set previous value of rich text only once, then we manually assign it when needed.\r\n    previousRichTextComponentConfig.current = richTextConfig;\r\n  }, []);\r\n\r\n  useEffect(\r\n    // Component is blurred when the user selects other component in editor. This is different from blurring content editable.\r\n    // Content editable can be blurred, but the component can remain active ex. when we select some text within content editable\r\n    // and want to update its color from the sidebar.\r\n    function handleRichTextBlur() {\r\n      if (!isRichTextActive && isEnabled) {\r\n        // editor.children = deepClone(editorValue);\r\n        setIsEnabled(false);\r\n        currentSelectionRef.current = null;\r\n      }\r\n\r\n      if (!editor.selection) {\r\n        return;\r\n      }\r\n\r\n      if (!isRichTextActive) {\r\n        Transforms.deselect(editor);\r\n\r\n        const isSlateValueEmpty = isEditorValueEmpty(\r\n          editor.children as Array<BlockElement>\r\n        );\r\n\r\n        // When value for current locale is empty we want to show value from fallback value instead of placeholder\r\n        // if the fallback value is present.\r\n        if (isSlateValueEmpty && fallbackRichTextElements !== undefined) {\r\n          const nextRichTextElement = deepClone(richTextConfig);\r\n          delete nextRichTextElement.elements[contextParams.locale];\r\n          editor.children = convertRichTextElementsToEditorValue(\r\n            fallbackRichTextElements\r\n          );\r\n          form.change(path, nextRichTextElement);\r\n        }\r\n      }\r\n    },\r\n    [focussedField, isEnabled, isRichTextActive]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // If editor has been refocused and it was blurred earlier we have to disable the decoration to show only browser selection\r\n    if (ReactEditor.isFocused(editor) && isDecorationActive) {\r\n      setIsDecorationActive(false);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleRichTextChanged(event: RichTextChangedEvent) {\r\n      if (!editor.selection) {\r\n        return;\r\n      }\r\n\r\n      if (event.data.type === \"@easyblocks-editor/rich-text-changed\") {\r\n        const { payload } = event.data;\r\n        const { editorContext } = (window.parent as any).editorWindowAPI;\r\n\r\n        // Slate is an uncontrolled component and we don't have an easy access to control it.\r\n        // It keeps its state internally and on each change we convert this state to our format.\r\n        // This works great because changing content of editable element is easy, we append or remove things.\r\n        // When we change the color/font of selected text there are many questions:\r\n        // - is the current selection partial or does it span everything?\r\n        // - how to split text chunks when selection is partial?\r\n        // - how to update selection?\r\n        //\r\n        // `Editor.addMark` method automatically will split (or not) text chunks, update selection etc.\r\n        // It will just do all the painful things. After the Slate do its job, we take its current state after the update\r\n        // and convert it to entry and correct focused fields.\r\n        const temporaryEditor = createTemporaryEditor(editor);\r\n\r\n        const updateSelectionResult = updateSelection(\r\n          temporaryEditor,\r\n          payload.prop,\r\n          ...payload.values\r\n        );\r\n\r\n        if (!updateSelectionResult) {\r\n          return;\r\n        }\r\n\r\n        currentSelectionRef.current = temporaryEditor.selection;\r\n\r\n        actions.runChange(() => {\r\n          const newRichTextElement: RichTextComponentConfig = {\r\n            ...richTextConfig,\r\n            elements: {\r\n              ...richTextConfig.elements,\r\n              [editorContext.contextParams.locale]:\r\n                updateSelectionResult.elements,\r\n            },\r\n          };\r\n\r\n          form.change(path, newRichTextElement);\r\n\r\n          const newFocusedFields =\r\n            updateSelectionResult.focusedRichTextParts.map(\r\n              (focusedRichTextPart) =>\r\n                getAbsoluteRichTextPartPath(\r\n                  focusedRichTextPart,\r\n                  path,\r\n                  editorContext.contextParams.locale\r\n                )\r\n            );\r\n\r\n          return newFocusedFields;\r\n        });\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"message\", handleRichTextChanged);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"message\", handleRichTextChanged);\r\n    };\r\n  }, [richTextConfig, path]);\r\n\r\n  const decorate = createTextSelectionDecorator(editor);\r\n  const Elements = extractElementsFromCompiledComponents(props);\r\n\r\n  function renderElement({\r\n    attributes,\r\n    children,\r\n    element,\r\n  }: RenderElementProps) {\r\n    const Element = Elements.find(\r\n      (Element) =>\r\n        Element._id === element.id ||\r\n        NORMALIZED_IDS_TO_IDS.get(element.id) === Element._id\r\n    );\r\n\r\n    if (!Element) {\r\n      // This can only happen if the current locale has no value and has no fallback\r\n      if (Elements.length === 0) {\r\n        if (element.type === \"list-item\") {\r\n          return (\r\n            <div {...attributes}>\r\n              <div>{children}</div>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return <div {...attributes}>{children}</div>;\r\n      }\r\n\r\n      throw new Error(\"Missing element\");\r\n    }\r\n\r\n    const compiledStyles = (() => {\r\n      if (Element._component === \"@easyblocks/rich-text-block-element\") {\r\n        if (Element.props.type === \"bulleted-list\") {\r\n          return Element.styled.BulletedList;\r\n        } else if (Element.props.type === \"numbered-list\") {\r\n          return Element.styled.NumberedList;\r\n        } else if (Element.props.type === \"paragraph\") {\r\n          return Element.styled.Paragraph;\r\n        }\r\n      } else if (Element._component === \"@easyblocks/rich-text-line-element\") {\r\n        if (element.type === \"text-line\") {\r\n          return Element.styled.TextLine;\r\n        } else if (element.type === \"list-item\") {\r\n          return Element.styled.ListItem;\r\n        }\r\n      }\r\n    })();\r\n\r\n    if (compiledStyles === undefined) {\r\n      throw new Error(\"Unknown element type\");\r\n    }\r\n\r\n    return (\r\n      <Box\r\n        __compiled={compiledStyles}\r\n        devices={devices}\r\n        stitches={stitches}\r\n        {...attributes}\r\n        // Element annotation for easier debugging\r\n        {...(process.env.NODE_ENV === \"development\" && {\r\n          \"data-shopstory-element-type\": element.type,\r\n          \"data-shopstory-id\": element.id,\r\n        })}\r\n      >\r\n        {element.type === \"list-item\" ? <div>{children}</div> : children}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  const TextParts = extractTextPartsFromCompiledComponents(props);\r\n\r\n  function renderLeaf({ attributes, children, leaf }: RenderLeafProps) {\r\n    let TextPart = TextParts.find((TextPart) => {\r\n      return TextPart._id === leaf.id;\r\n    });\r\n\r\n    if (!TextPart) {\r\n      TextPart = TextParts.find((TextPart) => {\r\n        return NORMALIZED_IDS_TO_IDS.get(leaf.id) === TextPart._id;\r\n      });\r\n    }\r\n\r\n    if (!TextPart) {\r\n      // This can only happen if the current locale has no value and has no fallback\r\n      if (TextParts.length === 0) {\r\n        return <span {...attributes}>{children}</span>;\r\n      }\r\n\r\n      throw new Error(\"Missing part\");\r\n    }\r\n\r\n    const TextPartComponent = (\r\n      <RichTextPartClient\r\n        value={children}\r\n        Text={\r\n          <Box\r\n            __compiled={TextPart.styled.Text}\r\n            devices={devices}\r\n            stitches={stitches}\r\n            {...attributes}\r\n          />\r\n        }\r\n        TextWrapper={\r\n          TextPart.components.TextWrapper[0] ? (\r\n            <ComponentBuilder\r\n              compiled={TextPart.components.TextWrapper[0]}\r\n              path={path}\r\n              components={editorContext.components}\r\n              passedProps={{\r\n                __isSelected:\r\n                  leaf.isHighlighted && leaf.highlightType === \"textWrapper\",\r\n              }}\r\n            />\r\n          ) : undefined\r\n        }\r\n      />\r\n    );\r\n\r\n    return TextPartComponent;\r\n  }\r\n\r\n  // Setting `display: flex` for element's aligning on `Editable` component makes default styles\r\n  // of placeholder insufficient thus they require to explicitly set `top` and `left`.\r\n  function renderPlaceholder({ attributes, children }: RenderPlaceholderProps) {\r\n    return (\r\n      <span\r\n        {...attributes}\r\n        style={{\r\n          ...attributes.style,\r\n          top: 0,\r\n          left: 0,\r\n        }}\r\n      >\r\n        {children}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  const scheduleConfigSync = useCallback(\r\n    throttle((nextValue: Array<BlockElement>) => {\r\n      setEditorValue(nextValue);\r\n      const nextElements = convertEditorValueToRichTextElements(nextValue);\r\n\r\n      actions.runChange(() => {\r\n        const newRichTextElement: RichTextComponentConfig = {\r\n          ...richTextConfig,\r\n          elements: {\r\n            ...richTextConfig.elements,\r\n            [editorContext.contextParams.locale]: nextElements,\r\n          },\r\n        };\r\n\r\n        form.change(path, newRichTextElement);\r\n        previousRichTextComponentConfig.current = newRichTextElement;\r\n\r\n        if (editor.selection) {\r\n          const nextFocusedFields = getFocusedFieldsFromSlateSelection(\r\n            editor,\r\n            path,\r\n            contextParams.locale\r\n          );\r\n\r\n          return nextFocusedFields;\r\n        }\r\n      });\r\n    }, RICH_TEXT_CONFIG_SYNC_THROTTLE_TIMEOUT),\r\n    [isConfigChanged, editorContext.contextParams.locale]\r\n  );\r\n\r\n  const scheduleFocusedFieldsChange = useCallback(\r\n    // Slate internally throttles the invocation of DOMSelectionChange for performance reasons.\r\n    // We also throttle update of our focused fields state for the same reason.\r\n    // This gives us a good balance between perf and showing updated fields within the sidebar.\r\n    throttle((focusedFields: Parameters<typeof setFocussedField>[0]) => {\r\n      setFocussedField(focusedFields);\r\n    }, RICH_TEXT_FOCUSED_FIELDS_SYNC_THROTTLE_TIMEOUT),\r\n    [setFocussedField]\r\n  );\r\n\r\n  function handleEditableChange(value: Array<Descendant>): void {\r\n    if (!isEnabled) {\r\n      return;\r\n    }\r\n\r\n    // Editor's value can be changed from outside ex. sidebar or history undo/redo. If the last reason for change\r\n    // was \"external\", we skip this change. In case we would like to start typing immediately after undo/redo we\r\n    // set last change reason to `text-input`.\r\n    if (\r\n      lastChangeReason.current === \"external\" ||\r\n      lastChangeReason.current === \"paste\"\r\n    ) {\r\n      lastChangeReason.current = \"text-input\";\r\n      return;\r\n    }\r\n\r\n    const isValueSame = deepCompare(value, editorValue);\r\n\r\n    // Slate runs `onChange` callback on any change, even when the text haven't changed.\r\n    // If value haven't changed, it must be a selection change.\r\n    if (isValueSame) {\r\n      const nextFocusedFields = getFocusedFieldsFromSlateSelection(\r\n        editor,\r\n        path,\r\n        contextParams.locale\r\n      );\r\n\r\n      if (nextFocusedFields) {\r\n        scheduleFocusedFieldsChange(nextFocusedFields);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    lastChangeReason.current = \"text-input\";\r\n    scheduleConfigSync(value as Array<BlockElement>);\r\n  }\r\n\r\n  function handleEditableFocus(): void {\r\n    if (!isEnabled) {\r\n      return;\r\n    }\r\n\r\n    lastChangeReason.current = \"text-input\";\r\n\r\n    // When value for current locale is empty we present the value from fallback.\r\n    // If user focuses editable element, we present the value of fallback unless it's also empty.\r\n    if (!localizedRichTextElements) {\r\n      let nextSlateValue = editor.children;\r\n      let nextRichTextComponentConfig: RichTextComponentConfig;\r\n\r\n      if (fallbackRichTextElements) {\r\n        nextRichTextComponentConfig = richTextConfig;\r\n        const fallbackFirstTextPart =\r\n          fallbackRichTextElements[0].elements[0].elements[0];\r\n\r\n        // Keep only one line element with single empty rich text\r\n        nextRichTextComponentConfig.elements[contextParams.locale] = [\r\n          {\r\n            ...fallbackRichTextElements[0],\r\n            elements: [\r\n              {\r\n                ...fallbackRichTextElements[0].elements[0],\r\n                elements: [\r\n                  {\r\n                    ...fallbackFirstTextPart,\r\n                    value: \"\",\r\n                  } as RichTextPartComponentConfig,\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n        ];\r\n\r\n        nextSlateValue = convertRichTextElementsToEditorValue(\r\n          nextRichTextComponentConfig.elements[contextParams.locale]\r\n        );\r\n\r\n        editor.children = nextSlateValue;\r\n\r\n        Transforms.select(editor, {\r\n          anchor: Editor.start(editor, []),\r\n          focus: Editor.start(editor, []),\r\n        });\r\n\r\n        form.change(path, nextRichTextComponentConfig);\r\n      } else {\r\n        // If current and fallback value is missing we have:\r\n        // - empty Slate value\r\n        // - empty config within component-collection-localised\r\n        // We will build next $richText component config based on current Slate value\r\n        nextRichTextComponentConfig = richTextConfig;\r\n        nextRichTextComponentConfig.elements[contextParams.locale] =\r\n          convertEditorValueToRichTextElements(\r\n            editor.children as Array<BlockElement>\r\n          );\r\n        form.change(path, nextRichTextComponentConfig);\r\n      }\r\n\r\n      previousRichTextComponentConfig.current = nextRichTextComponentConfig;\r\n\r\n      if (editor.selection) {\r\n        const nextFocusedFields = getFocusedRichTextPartsConfigPaths(\r\n          editor\r\n        ).map((richTextPartPath) =>\r\n          getAbsoluteRichTextPartPath(\r\n            richTextPartPath,\r\n            path,\r\n            contextParams.locale\r\n          )\r\n        );\r\n\r\n        setFocussedField(nextFocusedFields);\r\n      }\r\n    }\r\n\r\n    if (isDecorationActive) {\r\n      const root = ReactEditor.findDocumentOrShadowRoot(editor);\r\n      const slateStringElements = root.querySelectorAll(\"[data-slate-string]\");\r\n      slateStringElements.forEach((element) => {\r\n        element.replaceChildren(document.createTextNode(element.textContent!));\r\n      });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    function saveLatestSelection() {\r\n      const root = ReactEditor.findDocumentOrShadowRoot(editor);\r\n      const selection = (root as Document).getSelection();\r\n\r\n      if (selection && selection.type === \"Range\") {\r\n        currentSelectionRef.current = ReactEditor.toSlateRange(\r\n          editor,\r\n          selection,\r\n          { exactMatch: false, suppressThrow: true }\r\n        );\r\n      } else {\r\n        currentSelectionRef.current = null;\r\n      }\r\n    }\r\n\r\n    const throttledSaveLatestSelection = throttle(saveLatestSelection, 100);\r\n\r\n    if (isEnabled) {\r\n      window.document.addEventListener(\r\n        \"selectionchange\",\r\n        throttledSaveLatestSelection\r\n      );\r\n\r\n      return () => {\r\n        window.document.removeEventListener(\r\n          \"selectionchange\",\r\n          throttledSaveLatestSelection\r\n        );\r\n      };\r\n    }\r\n  }, [editor, isEnabled]);\r\n\r\n  function handleEditableBlur(): void {\r\n    lastChangeReason.current = \"external\";\r\n    setIsDecorationActive(true);\r\n  }\r\n\r\n  // When copying content from content editable, Slate will copy HTML content of selected nodes\r\n  // and this is not what we want. Instead we set clipboard data to contain selected content\r\n  // in form of rich text editable component config.\r\n  function handleEditableCopy(event: React.ClipboardEvent) {\r\n    const selectedRichTextComponentConfig = getRichTextComponentConfigFragment(\r\n      richTextConfig,\r\n      editorContext\r\n    );\r\n\r\n    event.clipboardData.setData(\r\n      \"text/x-shopstory\",\r\n      JSON.stringify(selectedRichTextComponentConfig)\r\n    );\r\n  }\r\n\r\n  function handleEditablePaste(event: React.ClipboardEvent) {\r\n    const selectedRichTextComponentConfigClipboardData =\r\n      event.clipboardData.getData(\"text/x-shopstory\");\r\n\r\n    if (selectedRichTextComponentConfigClipboardData) {\r\n      const selectedRichTextComponentConfig: RichTextComponentConfig =\r\n        JSON.parse(selectedRichTextComponentConfigClipboardData);\r\n\r\n      // Preventing the default action will also prevent Slate from handling this event on his own.\r\n      event.preventDefault();\r\n\r\n      const nextSlateValue = convertRichTextElementsToEditorValue(\r\n        duplicateConfig(selectedRichTextComponentConfig, editorContext)\r\n          .elements[contextParams.locale]\r\n      );\r\n\r\n      const temporaryEditor = createTemporaryEditor(editor);\r\n      Editor.insertFragment(temporaryEditor, nextSlateValue);\r\n      const nextElements = convertEditorValueToRichTextElements(\r\n        temporaryEditor.children as Array<BlockElement>\r\n      );\r\n\r\n      actions.runChange(() => {\r\n        form.change(richTextElementsConfigPath, nextElements);\r\n\r\n        const nextFocusedFields = getFocusedFieldsFromSlateSelection(\r\n          temporaryEditor,\r\n          path,\r\n          contextParams.locale\r\n        );\r\n\r\n        return nextFocusedFields;\r\n      });\r\n\r\n      lastChangeReason.current = \"paste\";\r\n    } else if (\r\n      // Slate only handles pasting if the clipboardData contains text/plain type.\r\n      // When copying text from the Contentful's rich text editor, the clipboardData contains\r\n      // more than one type, so we have to handle this case manually.\r\n      event.clipboardData.types.length > 1 &&\r\n      event.clipboardData.types.some((type) => type === \"text/plain\")\r\n    ) {\r\n      Editor.insertText(editor, event.clipboardData.getData(\"text/plain\"));\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  const contentEditableClassName = useMemo(() => {\r\n    const responsiveAlignmentStyles = mapResponsiveAlignmentToStyles(align, {\r\n      devices: editorContext.devices,\r\n      resop,\r\n    });\r\n\r\n    const isFallbackValueShown =\r\n      localizedRichTextElements === undefined &&\r\n      fallbackRichTextElements !== undefined;\r\n\r\n    // When we make a selection of text within editable container and then blur\r\n    // sometimes the browser selection changes and shows incorrectly selected chunks.\r\n    const getStyles = stitches.css({\r\n      display: \"flex\",\r\n      ...responsiveAlignmentStyles,\r\n      cursor: !isEnabled ? \"inherit\" : \"text\",\r\n      \"& *\": {\r\n        pointerEvents: isEnabled ? \"auto\" : \"none\",\r\n        userSelect: isEnabled ? \"auto\" : \"none\",\r\n      },\r\n      \"& *::selection\": {\r\n        backgroundColor: \"#b4d5fe\",\r\n      },\r\n      ...(isDecorationActive && {\r\n        \"& *::selection\": {\r\n          backgroundColor: \"transparent\",\r\n        },\r\n        \"& *[data-easyblocks-rich-text-selection]\": {\r\n          backgroundColor: \"#b4d5fe\",\r\n        },\r\n      }),\r\n      ...(isFallbackValueShown && {\r\n        opacity: 0.5,\r\n      }),\r\n      // Remove any text decoration from slate nodes that are elements. We only need text decoration on text elements.\r\n      \"[data-slate-node]\": {\r\n        textDecoration: \"none\",\r\n      },\r\n    });\r\n\r\n    return getStyles().className;\r\n  }, [\r\n    align,\r\n    isDecorationActive,\r\n    localizedRichTextElements,\r\n    fallbackRichTextElements,\r\n    isEnabled,\r\n  ]);\r\n\r\n  return (\r\n    <Slate editor={editor} value={editorValue} onChange={handleEditableChange}>\r\n      <div>\r\n        {/* this wrapper div prevents from Chrome bug where \"pointer-events: none\" on contenteditable is ignored*/}\r\n        <Editable\r\n          className={contentEditableClassName}\r\n          placeholder=\"Here goes text content\"\r\n          renderElement={renderElement}\r\n          renderLeaf={renderLeaf}\r\n          renderPlaceholder={renderPlaceholder}\r\n          decorate={decorate}\r\n          onFocus={handleEditableFocus}\r\n          onBlur={handleEditableBlur}\r\n          onCopy={handleEditableCopy}\r\n          onPaste={handleEditablePaste}\r\n          onMouseDown={(event) => {\r\n            if (isEnabled) {\r\n              event.stopPropagation();\r\n              return;\r\n            }\r\n\r\n            if (event.detail === 2) {\r\n              event.preventDefault();\r\n\r\n              flushSync(() => {\r\n                setIsEnabled(true);\r\n              });\r\n\r\n              ReactEditor.focus(editor);\r\n\r\n              if (isEditorValueEmpty(editor.children as Array<BlockElement>)) {\r\n                return;\r\n              }\r\n\r\n              const editorSelectionRange = {\r\n                anchor: Editor.start(editor, []),\r\n                focus: Editor.end(editor, []),\r\n              };\r\n\r\n              Transforms.setSelection(editor, editorSelectionRange);\r\n              const editorSelectionDOMRange = ReactEditor.toDOMRange(\r\n                editor,\r\n                editorSelectionRange\r\n              );\r\n\r\n              window\r\n                .getSelection()\r\n                ?.setBaseAndExtent(\r\n                  editorSelectionDOMRange.startContainer,\r\n                  editorSelectionDOMRange.startOffset,\r\n                  editorSelectionDOMRange.endContainer,\r\n                  editorSelectionDOMRange.endOffset\r\n                );\r\n            }\r\n          }}\r\n          readOnly={!isEnabled}\r\n        />\r\n      </div>\r\n    </Slate>\r\n  );\r\n}\r\n\r\nexport { RichTextEditor };\r\nexport type { RichTextProps };\r\n\r\nfunction isEditorValueEmpty(editorValue: Array<BlockElement>) {\r\n  return (\r\n    editorValue.length === 1 &&\r\n    editorValue[0].children.length === 1 &&\r\n    editorValue[0].children[0].children.length === 1 &&\r\n    Text.isText(editorValue[0].children[0].children[0]) &&\r\n    editorValue[0].children[0].children[0].text === \"\"\r\n  );\r\n}\r\n\r\nfunction isConfigEqual(newConfig: any, oldConfig: any) {\r\n  return deepCompare(newConfig, oldConfig);\r\n}\r\n\r\nfunction mapResponsiveAlignmentToStyles(\r\n  align: ResponsiveValue<Alignment>,\r\n  { devices, resop }: { devices: Devices; resop: any }\r\n) {\r\n  function mapAlignmentToFlexAlignment(align: Alignment) {\r\n    if (align === \"center\") {\r\n      return \"center\";\r\n    }\r\n\r\n    if (align === \"right\") {\r\n      return \"flex-end\";\r\n    }\r\n\r\n    return \"flex-start\";\r\n  }\r\n\r\n  const responsiveStyles = resop(\r\n    {\r\n      align: responsiveValueFill(align, devices, getDevicesWidths(devices)),\r\n    },\r\n    (values: any) => {\r\n      return {\r\n        justifyContent: mapAlignmentToFlexAlignment(values.align),\r\n        textAlign: values.align,\r\n      };\r\n    },\r\n    devices\r\n  );\r\n\r\n  const compiledStyles = compileBox(responsiveStyles, devices);\r\n\r\n  return getBoxStyles(compiledStyles, devices);\r\n}\r\n\r\nfunction createTextSelectionDecorator(editor: Editor) {\r\n  return ([node, path]: NodeEntry) => {\r\n    const decorations: Array<Range> = [];\r\n\r\n    if (\r\n      Text.isText(node) &&\r\n      editor.selection !== null &&\r\n      node.TextWrapper.length > 0 &&\r\n      Range.isCollapsed(editor.selection)\r\n    ) {\r\n      const textRange = Editor.range(editor, path);\r\n      const intersection = Range.intersection(editor.selection, textRange);\r\n\r\n      if (intersection !== null) {\r\n        const range = {\r\n          isHighlighted: true,\r\n          highlightType: \"textWrapper\",\r\n          ...textRange,\r\n        };\r\n\r\n        decorations.push(range);\r\n      }\r\n    }\r\n\r\n    return decorations;\r\n  };\r\n}\r\n\r\nfunction splitStringNodes(editor: Editor, selection: BaseRange) {\r\n  const nodes = Editor.nodes(editor, {\r\n    at: selection,\r\n    match: Text.isText,\r\n  });\r\n\r\n  const domNodes = Array.from(nodes).map(([node]) => {\r\n    const domNode = ReactEditor.toDOMNode(editor, node);\r\n\r\n    return domNode;\r\n  });\r\n\r\n  if (domNodes.length === 1) {\r\n    const slateString = domNodes[0].querySelector(\"[data-slate-string]\");\r\n    const textContent = slateString!.textContent!;\r\n    const newChild = document.createDocumentFragment();\r\n\r\n    // Selection made within whole text node\r\n    if (\r\n      textContent.length === selection.focus.offset - selection.anchor.offset ||\r\n      textContent.length === selection.anchor.offset - selection.focus.offset\r\n    ) {\r\n      const selectedTextNode = document.createElement(\"span\");\r\n      selectedTextNode.textContent = textContent;\r\n      selectedTextNode.dataset.easyblocksRichTextSelection = \"true\";\r\n      newChild.appendChild(selectedTextNode);\r\n      slateString!.replaceChildren(newChild);\r\n    } else {\r\n      const selectedTextNode = document.createElement(\"span\");\r\n      selectedTextNode.textContent = textContent.slice(\r\n        selection.anchor.offset,\r\n        selection.focus.offset\r\n      );\r\n      selectedTextNode.dataset.easyblocksRichTextSelection = \"true\";\r\n      newChild.appendChild(\r\n        document.createTextNode(textContent.slice(0, selection.anchor.offset))\r\n      );\r\n      newChild.appendChild(selectedTextNode);\r\n      newChild.appendChild(\r\n        document.createTextNode(textContent.slice(selection.focus.offset))\r\n      );\r\n      slateString!.replaceChildren(newChild);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  domNodes.forEach((node, index) => {\r\n    const slateString = node.querySelector(\"[data-slate-string]\");\r\n\r\n    if (slateString) {\r\n      const textContent = slateString.textContent!;\r\n      const newChild = document.createDocumentFragment();\r\n\r\n      if (index === 0) {\r\n        newChild.appendChild(\r\n          document.createTextNode(\r\n            slateString.textContent!.slice(0, selection.anchor.offset)\r\n          )\r\n        );\r\n        const selectedTextNode = document.createElement(\"span\");\r\n        selectedTextNode.textContent = textContent.slice(\r\n          selection.anchor.offset\r\n        );\r\n        selectedTextNode.dataset.easyblocksRichTextSelection = \"true\";\r\n        newChild.appendChild(selectedTextNode);\r\n\r\n        slateString.replaceChildren(newChild);\r\n      } else if (index === domNodes.length - 1) {\r\n        const selectedTextNode = document.createElement(\"span\");\r\n        selectedTextNode.textContent = textContent.slice(\r\n          0,\r\n          selection.focus.offset\r\n        );\r\n        selectedTextNode.dataset.easyblocksRichTextSelection = \"true\";\r\n        newChild.appendChild(selectedTextNode);\r\n        newChild.appendChild(\r\n          document.createTextNode(textContent.slice(selection.focus.offset))\r\n        );\r\n        slateString.replaceChildren(newChild);\r\n      } else {\r\n        const selectedTextNode = document.createElement(\"span\");\r\n        selectedTextNode.textContent = textContent;\r\n        selectedTextNode.dataset.easyblocksRichTextSelection = \"true\";\r\n        newChild.appendChild(selectedTextNode);\r\n        slateString.replaceChildren(newChild);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction unwrapStringNodesContent(editor: Editor) {\r\n  const root = ReactEditor.findDocumentOrShadowRoot(editor);\r\n  const slateStringElements = root.querySelectorAll(\"[data-slate-string]\");\r\n  slateStringElements.forEach((element) => {\r\n    element.replaceChildren(document.createTextNode(element.textContent!));\r\n  });\r\n}\r\n","import { cleanString } from \"@/utils\";\r\nimport debounce from \"lodash/debounce\";\r\nimport React from \"react\";\r\nimport { Locale, getFallbackForLocale } from \"../../locales\";\r\n\r\nexport function useTextValue(\r\n  value: any,\r\n  onChange: any,\r\n  locale: string,\r\n  locales: Array<Locale>,\r\n  defaultPlaceholder?: string,\r\n  normalize?: (x: string) => string | null\r\n) {\r\n  const isExternal = typeof value === \"object\" && value !== null;\r\n  const fallbackValue = isExternal\r\n    ? getFallbackForLocale(value.value, locale, locales)\r\n    : undefined;\r\n\r\n  const valueFromProps = (() => {\r\n    if (isExternal) {\r\n      let displayedValue = value.value?.[locale];\r\n\r\n      if (typeof displayedValue !== \"string\") {\r\n        displayedValue = fallbackValue ?? \"\";\r\n      }\r\n\r\n      return displayedValue;\r\n    }\r\n    return value ?? \"\";\r\n  })();\r\n\r\n  const previousValue = React.useRef(valueFromProps);\r\n\r\n  const [localInputValue, setLocalInputValue] = React.useState(valueFromProps);\r\n\r\n  function saveNewValue(newValue: string | null) {\r\n    if (isExternal) {\r\n      const newExternalValue = {\r\n        ...value,\r\n        value: {\r\n          ...value.value,\r\n          [locale]: newValue,\r\n        },\r\n      };\r\n\r\n      onChange(newExternalValue);\r\n    } else {\r\n      onChange(newValue);\r\n    }\r\n  }\r\n\r\n  const onChangeDebounced = React.useCallback(\r\n    debounce((newValue: string) => {\r\n      // If normalization is on, we shouldn't save on change\r\n      if (normalize) {\r\n        return;\r\n      }\r\n\r\n      saveNewValue(newValue);\r\n    }, 500),\r\n    [isExternal]\r\n  );\r\n\r\n  function handleBlur() {\r\n    onChangeDebounced.cancel();\r\n\r\n    let newValue = localInputValue;\r\n\r\n    if (normalize) {\r\n      const normalized = normalize(newValue);\r\n      if (normalized === null) {\r\n        newValue = previousValue.current;\r\n      } else {\r\n        newValue = normalized;\r\n        previousValue.current = localInputValue;\r\n      }\r\n    }\r\n\r\n    setLocalInputValue(newValue);\r\n\r\n    if (isExternal) {\r\n      if (newValue.trim() === \"\") {\r\n        saveNewValue(null);\r\n        setLocalInputValue(fallbackValue ?? \"\");\r\n      } else {\r\n        saveNewValue(newValue);\r\n      }\r\n    } else {\r\n      if (value !== newValue) {\r\n        saveNewValue(newValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleChange(\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) {\r\n    setLocalInputValue(event.target.value);\r\n    onChangeDebounced(event.target.value);\r\n  }\r\n\r\n  // Sync local value with value from the config if the field value has been\r\n  // changed from outside\r\n  React.useEffect(() => {\r\n    setLocalInputValue(valueFromProps);\r\n  }, [valueFromProps]);\r\n\r\n  const style: any = {\r\n    opacity: localInputValue === fallbackValue ? 0.5 : 1,\r\n  };\r\n\r\n  return {\r\n    onChange: handleChange,\r\n    onBlur: handleBlur,\r\n    value: cleanString(localInputValue),\r\n    style,\r\n    placeholder: defaultPlaceholder ?? \"Enter text\",\r\n  };\r\n}\r\n","import { dotNotationGet } from \"@/utils\";\r\nimport React, { ElementRef, useRef, useState } from \"react\";\r\nimport { flushSync } from \"react-dom\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport { useTextValue } from \"../useTextValue\";\r\n\r\ninterface InlineTextProps {\r\n  path: string;\r\n  placeholder?: string;\r\n  stitches: any;\r\n}\r\n\r\nexport function InlineTextarea({\r\n  path,\r\n  placeholder,\r\n  stitches,\r\n}: InlineTextProps) {\r\n  const [isEnabled, setIsEnabled] = useState(false);\r\n  const textAreaRef = useRef<ElementRef<\"textarea\">>(null);\r\n\r\n  const {\r\n    form,\r\n    contextParams: { locale },\r\n    locales,\r\n  } = (window.parent as any).editorWindowAPI.editorContext;\r\n  const valuePath = `${path}.value`;\r\n  const value = dotNotationGet(form.values, valuePath);\r\n\r\n  const inputProps = useTextValue(\r\n    value,\r\n    (val: string | null) => {\r\n      form.change(valuePath, val);\r\n    },\r\n    locale,\r\n    locales,\r\n    placeholder\r\n  );\r\n\r\n  const css = stitches.css({\r\n    width: \"100%\",\r\n    wordWrap: \"break-word\",\r\n    display: \"block\",\r\n    fontSize: \"inherit\",\r\n    fontFamily: \"inherit\",\r\n    fontWeight: \"inherit\",\r\n    boxSizing: \"border-box\",\r\n    color: \"inherit\",\r\n    letterSpacing: \"inherit\",\r\n    lineHeight: \"inherit\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"inherit\",\r\n    textTransform: \"inherit\",\r\n    backgroundColor: \"inherit\",\r\n    textAlign: \"inherit\",\r\n    outline: \"none\",\r\n    resize: \"none\",\r\n    border: \"none\",\r\n    overflow: \"visible\",\r\n    position: \"relative\",\r\n    padding: 0,\r\n    \"-ms-overflow-style\": \"none\",\r\n    \"&::-webkit-scrollbar\": {\r\n      display: \"none\",\r\n    },\r\n    pointerEvents: isEnabled ? \"auto\" : \"none\",\r\n  })();\r\n\r\n  return (\r\n    <div\r\n      onMouseDown={(event) => {\r\n        if (event.detail === 2) {\r\n          event.preventDefault();\r\n\r\n          flushSync(() => {\r\n            setIsEnabled(true);\r\n          });\r\n\r\n          textAreaRef.current?.select();\r\n        }\r\n      }}\r\n    >\r\n      <TextareaAutosize\r\n        className={css}\r\n        rows={1}\r\n        {...inputProps}\r\n        ref={textAreaRef}\r\n        onMouseDown={(event) => {\r\n          if (isEnabled) {\r\n            event.stopPropagation();\r\n            return;\r\n          }\r\n        }}\r\n        onBlur={() => {\r\n          setIsEnabled(false);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","\"use client\";\r\nimport { dotNotationGet } from \"@/utils\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { InternalNoCodeComponentProps } from \"../../../components/ComponentBuilder/ComponentBuilder\";\r\nimport { InlineTextarea } from \"./InlineTextarea\";\r\n\r\ntype TextProps = {\r\n  value: string | undefined;\r\n  Text: ReactElement;\r\n} & InternalNoCodeComponentProps;\r\n\r\nfunction TextEditor(props: TextProps) {\r\n  const {\r\n    Text,\r\n    value,\r\n    __easyblocks: { path, runtime },\r\n  } = props;\r\n\r\n  const { form } = (window.parent as any).editorWindowAPI.editorContext;\r\n  const valuePath = `${path}.value`;\r\n  const configValue = dotNotationGet(form.values, valuePath);\r\n  const isLocalTextReference = configValue.id?.startsWith(\"local.\");\r\n\r\n  return (\r\n    <Text.type {...Text.props} as={\"div\"}>\r\n      {isLocalTextReference ? (\r\n        <InlineTextarea\r\n          path={path}\r\n          placeholder={\"Here goes text content\"}\r\n          stitches={runtime.stitches}\r\n        />\r\n      ) : (\r\n        value ?? <span>&nbsp;</span>\r\n      )}\r\n    </Text.type>\r\n  );\r\n}\r\n\r\nexport { TextEditor };\r\n","import { uniqueId } from \"@/utils\";\r\nimport { getDefaultLocale } from \"../../../locales\";\r\nimport { EditorContextType } from \"../../types\";\r\n\r\nexport function buildText(x: string, editorContext: EditorContextType) {\r\n  const defaultLocale = getDefaultLocale(editorContext.locales);\r\n\r\n  return {\r\n    id: \"locale.\" + uniqueId(),\r\n    value: {\r\n      [defaultLocale.code]: x,\r\n    },\r\n  };\r\n}\r\n","import { ComponentSchemaProp } from \"../../types\";\r\n\r\nexport const buttonOptionalIconSchemaProp: ComponentSchemaProp = {\r\n  prop: \"symbol\",\r\n  label: \"Symbol\",\r\n  type: \"component\",\r\n  accepts: [\"symbol\"],\r\n  visible: true,\r\n  group: \"Properties\",\r\n};\r\n\r\nexport const buttonRequiredIconSchemaProp: ComponentSchemaProp = {\r\n  ...buttonOptionalIconSchemaProp,\r\n  required: true,\r\n};\r\n","import { dotNotationSet } from \"@/utils\";\r\nimport { EasyblocksBackend } from \"./EasyblocksBackend\";\r\nimport { createCompilationContext } from \"./compiler/createCompilationContext\";\r\nimport { Devices } from \"./types\";\r\n\r\nexport const testDevices: Devices = [\r\n  {\r\n    id: \"b1\",\r\n    w: 100,\r\n    h: 100,\r\n    breakpoint: 150,\r\n  },\r\n  {\r\n    id: \"b2\",\r\n    w: 200,\r\n    h: 200,\r\n    breakpoint: 250,\r\n  },\r\n  {\r\n    id: \"b3\",\r\n    w: 300,\r\n    h: 300,\r\n    breakpoint: 350,\r\n  },\r\n  {\r\n    id: \"b4\",\r\n    w: 400,\r\n    h: 400,\r\n    breakpoint: 450,\r\n  },\r\n  {\r\n    id: \"b5\",\r\n    w: 500,\r\n    h: 500,\r\n    breakpoint: null,\r\n  },\r\n];\r\n\r\nfunction createFormMock(initialValues: Record<PropertyKey, any> = {}) {\r\n  return {\r\n    reset() {\r\n      this.values = initialValues;\r\n    },\r\n    values: initialValues,\r\n    change(path: string, value: any) {\r\n      if (path === \"\") {\r\n        this.values = value;\r\n        return;\r\n      }\r\n\r\n      dotNotationSet(this.values, path, value);\r\n    },\r\n  };\r\n}\r\n\r\nfunction createTestCompilationContext() {\r\n  return createCompilationContext(\r\n    {\r\n      backend: new EasyblocksBackend({ accessToken: \"\" }),\r\n      locales: [{ code: \"en\", isDefault: true }],\r\n      components: [{ id: \"TestComponent\", schema: [] }],\r\n    },\r\n    { locale: \"en\" },\r\n    \"TestComponent\"\r\n  );\r\n}\r\n\r\nexport { createFormMock, createTestCompilationContext };\r\n"],"names":["last","collection","length","keys","o","Object","duplicateConfig","inputConfig","compilationContext","config","deepClone","traverseComponents","_ref","componentConfig","_id","uniqueId","configTraverse","_ref2","value","schemaProp","type","id","RICH_TEXT_CONFIG_SYNC_THROTTLE_TIMEOUT","RICH_TEXT_FOCUSED_FIELDS_SYNC_THROTTLE_TIMEOUT","getAbsoluteRichTextPartPath","relativeRichTextPartPath","richTextPath","locale","convertEditorValueToRichTextElements","editorValue","map","blockElement","Element","isElementType","convertEditorListElementToRichTextListBlockElement","convertEditorParagraphElementToRichTextParagraphBlockElement","Error","convertEditorElementToRichTextLineElement","editorElement","lineElement","buildRichTextLineElementComponentConfig","elements","children","child","buildRichTextPartComponentConfig","cleanString","text","color","font","TextWrapper","listBlockElement","buildRichTextBlockElementComponentConfig","paragraphBlockElement","getFocusedRichTextPartsConfigPaths","editor","selection","isBackward","Range","anchorProperty","focusProperty","anchor","focus","selectedTextNodes","Array","from","Editor","nodes","match","Text","isText","range","start","offset","end","textNode","textPath","buildFocusedRichTextPartConfigPath","focusedRichTextPartsConfigPaths","textEntryIndex","filter","configPath","path","focusedRichTextPartConfigPath","join","isPartialSelection","isCaretSelection","isEditorSelection","updateSelection","key","_len","arguments","values","_key","isSelectionCollapsed","isCollapsed","expandCurrentSelectionToWholeTextPart","addMark","firstSelectedNodeEntry","Node","first","lastSelectedNodeEntry","firstSelectedNode","lastSelectedNode","Transforms","setNodes","selectedTextNodeEntries","selectedTextNodesRanges","textNodePath","intersection","nonNullable","withoutNormalizing","reverse","forEach","index","at","split","richTextElements","newFocusedRichTextParts","focusedRichTextParts","textPartPath","setSelection","convertRichTextElementsToEditorValue","getPlaceholderRichTextElements","richTextBlockElementComponentConfig","convertRichTextBlockElementComponentConfigToEditorElement","convertRichTextPartComponentConfigToEditorText","richTextPartComponentConfig","blockElementComponentConfig","lineElementComponentConfig","childComponentConfig","tokenId","widgetId","USED_IDS","Set","NORMALIZED_IDS_TO_IDS","Map","withEasyblocks","normalizeNode","entry","unwrapBlockElementsNestedWithinBlockElement","mergeVisuallyTheSameOrEmptyTextNodes","updateNonUniqueIds","clear","node","SlateElement","isElement","includes","nodeParent","SlateNode","parent","unwrapNodes","liftNodes","has","newId","set","n","add","textLineChildren","childIndex","currentChildNode","currentChildPath","nextChildNode","nextChildPath","compareText","mergeNodes","trim","undefined","filterNonComparableProperties","obj","reduce","filteredObject","currentKey","text1","text2","areEqual","part1Keys","part2Keys","part1Value","part2Value","areValuesEqual","deepCompare","createTemporaryEditor","temporaryEditor","withReact","createEditor","traverseCompiledRichTextComponentConfig","callback","reactElement","props","compiled","components","compiledLineElement","compiledTextPart","extractElementsFromCompiledComponents","compiledRichText","extractedCompiledElementComponents","compiledConfig","_component","push","extractTextPartsFromCompiledComponents","extractedTextPartComponents","parseFocusedRichTextPartConfigPath","focusedRichTextPartConfigPathMatch","richTextPartConfigPath","rangeMatch","getEditorSelectionFromFocusedFields","focusedFields","form","anchorFocusedField","focusFocusedField","parsedAnchorField","parsedFocusedField","dotNotationGet","error","console","log","getFocusedFieldsFromSlateSelection","richTextComponentConfigPath","focusedRichTextPartPaths","richTextPartPath","stripRichTextPartSelection","replace","getRichTextComponentConfigFragment","sourceRichTextComponentConfig","editorContext","focussedField","contextParams","newRichTextComponentConfig","focusedField","textPartConfig","get","newTextPartConfig","slice","lastParentConfigPath","pathIndex","currentConfigPath","parentConfig","Math","min","currentConfig","sourceConfigPath","sourceConfig","configCopy","textPartParentConfig","RichTextEditor","window","editorWindowAPI","actions","locales","setFocussedField","__easyblocks","runtime","resop","stitches","devices","align","richTextConfig","useState","localizedRichTextElements","fallbackRichTextElements","getFallbackForLocale","richTextElementsConfigPath","setEditorValue","isDecorationActive","setIsDecorationActive","lastChangeReason","useRef","isEnabled","setIsEnabled","previousRichTextComponentConfig","currentSelectionRef","isConfigChanged","isConfigEqual","current","nextEditorValue","newEditorSelection","select","deselect","useLayoutEffect","splitStringNodes","unwrapStringNodesContent","isRichTextActive","some","startsWith","useEffect","handleRichTextBlur","isSlateValueEmpty","isEditorValueEmpty","nextRichTextElement","change","ReactEditor","isFocused","handleRichTextChanged","event","data","payload","updateSelectionResult","prop","runChange","newRichTextElement","newFocusedFields","focusedRichTextPart","addEventListener","removeEventListener","decorate","createTextSelectionDecorator","Elements","renderElement","attributes","element","find","React","createElement","compiledStyles","styled","BulletedList","NumberedList","Paragraph","TextLine","ListItem","Box","_extends","__compiled","process","env","NODE_ENV","TextParts","renderLeaf","leaf","TextPart","TextPartComponent","RichTextPartClient","ComponentBuilder","passedProps","__isSelected","isHighlighted","highlightType","renderPlaceholder","_ref3","style","top","left","scheduleConfigSync","useCallback","throttle","nextValue","nextElements","nextFocusedFields","scheduleFocusedFieldsChange","handleEditableChange","isValueSame","handleEditableFocus","nextSlateValue","nextRichTextComponentConfig","fallbackFirstTextPart","root","findDocumentOrShadowRoot","slateStringElements","querySelectorAll","replaceChildren","document","createTextNode","textContent","saveLatestSelection","getSelection","toSlateRange","exactMatch","suppressThrow","throttledSaveLatestSelection","handleEditableBlur","handleEditableCopy","selectedRichTextComponentConfig","clipboardData","setData","JSON","stringify","handleEditablePaste","selectedRichTextComponentConfigClipboardData","getData","parse","preventDefault","insertFragment","types","insertText","contentEditableClassName","useMemo","responsiveAlignmentStyles","mapResponsiveAlignmentToStyles","isFallbackValueShown","getStyles","css","display","cursor","pointerEvents","userSelect","backgroundColor","opacity","textDecoration","className","Slate","onChange","Editable","placeholder","onFocus","onBlur","onCopy","onPaste","onMouseDown","stopPropagation","detail","flushSync","editorSelectionRange","editorSelectionDOMRange","toDOMRange","setBaseAndExtent","startContainer","startOffset","endContainer","endOffset","readOnly","newConfig","oldConfig","_ref4","mapAlignmentToFlexAlignment","responsiveStyles","responsiveValueFill","getDevicesWidths","justifyContent","textAlign","compileBox","getBoxStyles","_ref5","decorations","textRange","domNodes","_ref6","domNode","toDOMNode","slateString","querySelector","newChild","createDocumentFragment","selectedTextNode","dataset","easyblocksRichTextSelection","appendChild","useTextValue","defaultPlaceholder","normalize","isExternal","fallbackValue","valueFromProps","displayedValue","previousValue","localInputValue","setLocalInputValue","saveNewValue","newValue","newExternalValue","onChangeDebounced","debounce","handleBlur","cancel","normalized","handleChange","target","InlineTextarea","textAreaRef","valuePath","inputProps","val","width","wordWrap","fontSize","fontFamily","fontWeight","boxSizing","letterSpacing","lineHeight","margin","maxWidth","textTransform","outline","resize","border","overflow","position","padding","TextareaAutosize","rows","ref","TextEditor","configValue","isLocalTextReference","as","buildText","x","defaultLocale","getDefaultLocale","code","buttonOptionalIconSchemaProp","label","accepts","visible","group","buttonRequiredIconSchemaProp","required","createFormMock","initialValues","reset","dotNotationSet","createTestCompilationContext","createCompilationContext","backend","EasyblocksBackend","accessToken","isDefault","schema"],"mappings":"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"}