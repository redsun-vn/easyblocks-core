{"version":3,"file":"reducer.cjs","sources":["../../../../src/reduce-css-calc/lib/reducer.js"],"sourcesContent":["import { convert } from \"./convert\";\r\n\r\nfunction reduce(node, precision) {\r\n  if (node.type === \"MathExpression\")\r\n    return reduceMathExpression(node, precision);\r\n  if (node.type === \"Calc\") return reduce(node.value, precision);\r\n\r\n  return node;\r\n}\r\n\r\nfunction isEqual(left, right) {\r\n  return left.type === right.type && left.value === right.value;\r\n}\r\n\r\nfunction isValueType(type) {\r\n  switch (type) {\r\n    case \"LengthValue\":\r\n    case \"AngleValue\":\r\n    case \"TimeValue\":\r\n    case \"FrequencyValue\":\r\n    case \"ResolutionValue\":\r\n    case \"EmValue\":\r\n    case \"ExValue\":\r\n    case \"ChValue\":\r\n    case \"RemValue\":\r\n    case \"VhValue\":\r\n    case \"VwValue\":\r\n    case \"VminValue\":\r\n    case \"VmaxValue\":\r\n    case \"PercentageValue\":\r\n    case \"Value\":\r\n      return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction convertMathExpression(node, precision) {\r\n  let nodes = convert(node.left, node.right, precision);\r\n  let left = reduce(nodes.left, precision);\r\n  let right = reduce(nodes.right, precision);\r\n\r\n  if (left.type === \"MathExpression\" && right.type === \"MathExpression\") {\r\n    if (\r\n      (left.operator === \"/\" && right.operator === \"*\") ||\r\n      (left.operator === \"-\" && right.operator === \"+\") ||\r\n      (left.operator === \"*\" && right.operator === \"/\") ||\r\n      (left.operator === \"+\" && right.operator === \"-\")\r\n    ) {\r\n      if (isEqual(left.right, right.right))\r\n        nodes = convert(left.left, right.left, precision);\r\n      else if (isEqual(left.right, right.left))\r\n        nodes = convert(left.left, right.right, precision);\r\n\r\n      left = reduce(nodes.left, precision);\r\n      right = reduce(nodes.right, precision);\r\n    }\r\n  }\r\n\r\n  node.left = left;\r\n  node.right = right;\r\n  return node;\r\n}\r\n\r\nexport function flip(operator) {\r\n  return operator === \"+\" ? \"-\" : \"+\";\r\n}\r\n\r\nfunction flipValue(node) {\r\n  if (isValueType(node.type)) node.value = -node.value;\r\n  else if (node.type == \"MathExpression\") {\r\n    node.left = flipValue(node.left);\r\n    node.right = flipValue(node.right);\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction reduceAddSubExpression(node, precision) {\r\n  const { left, right, operator: op } = node;\r\n\r\n  if (left.type === \"CssVariable\" || right.type === \"CssVariable\") return node;\r\n\r\n  // something + 0 => something\r\n  // something - 0 => something\r\n  if (right.value === 0) return left;\r\n\r\n  // 0 + something => something\r\n  if (left.value === 0 && op === \"+\") return right;\r\n\r\n  // 0 - something => -something\r\n  if (left.value === 0 && op === \"-\") return flipValue(right);\r\n\r\n  // value + value\r\n  // value - value\r\n  if (left.type === right.type && isValueType(left.type)) {\r\n    node = Object.assign({}, left);\r\n    if (op === \"+\") node.value = left.value + right.value;\r\n    else node.value = left.value - right.value;\r\n  }\r\n\r\n  // value <op> (expr)\r\n  if (\r\n    isValueType(left.type) &&\r\n    (right.operator === \"+\" || right.operator === \"-\") &&\r\n    right.type === \"MathExpression\"\r\n  ) {\r\n    // value + (value + something) => (value + value) + something\r\n    // value + (value - something) => (value + value) - something\r\n    // value - (value + something) => (value - value) - something\r\n    // value - (value - something) => (value - value) + something\r\n    if (left.type === right.left.type) {\r\n      node = Object.assign({}, node);\r\n      node.left = reduce(\r\n        {\r\n          type: \"MathExpression\",\r\n          operator: op,\r\n          left: left,\r\n          right: right.left,\r\n        },\r\n        precision\r\n      );\r\n      node.right = right.right;\r\n      node.operator = op === \"-\" ? flip(right.operator) : right.operator;\r\n      return reduce(node, precision);\r\n    }\r\n    // value + (something + value) => (value + value) + something\r\n    // value + (something - value) => (value - value) + something\r\n    // value - (something + value) => (value - value) - something\r\n    // value - (something - value) => (value + value) - something\r\n    else if (left.type === right.right.type) {\r\n      node = Object.assign({}, node);\r\n      node.left = reduce(\r\n        {\r\n          type: \"MathExpression\",\r\n          operator: op === \"-\" ? flip(right.operator) : right.operator,\r\n          left: left,\r\n          right: right.right,\r\n        },\r\n        precision\r\n      );\r\n      node.right = right.left;\r\n      return reduce(node, precision);\r\n    }\r\n  }\r\n\r\n  // (expr) <op> value\r\n  if (\r\n    left.type === \"MathExpression\" &&\r\n    (left.operator === \"+\" || left.operator === \"-\") &&\r\n    isValueType(right.type)\r\n  ) {\r\n    // (value + something) + value => (value + value) + something\r\n    // (value - something) + value => (value + value) - something\r\n    // (value + something) - value => (value - value) + something\r\n    // (value - something) - value => (value - value) - something\r\n    if (right.type === left.left.type) {\r\n      node = Object.assign({}, left);\r\n      node.left = reduce(\r\n        {\r\n          type: \"MathExpression\",\r\n          operator: op,\r\n          left: left.left,\r\n          right: right,\r\n        },\r\n        precision\r\n      );\r\n      return reduce(node, precision);\r\n    }\r\n    // (something + value) + value => something + (value + value)\r\n    // (something - value1) + value2 => something - (value2 - value1)\r\n    // (something + value) - value => something + (value - value)\r\n    // (something - value) - value => something - (value + value)\r\n    else if (right.type === left.right.type) {\r\n      node = Object.assign({}, left);\r\n      if (left.operator === \"-\") {\r\n        node.right = reduce(\r\n          {\r\n            type: \"MathExpression\",\r\n            operator: op === \"-\" ? \"+\" : \"-\",\r\n            left: right,\r\n            right: left.right,\r\n          },\r\n          precision\r\n        );\r\n        node.operator = op === \"-\" ? \"-\" : \"+\";\r\n      } else {\r\n        node.right = reduce(\r\n          {\r\n            type: \"MathExpression\",\r\n            operator: op,\r\n            left: left.right,\r\n            right: right,\r\n          },\r\n          precision\r\n        );\r\n      }\r\n      if (node.right.value < 0) {\r\n        node.right.value *= -1;\r\n        node.operator = node.operator === \"-\" ? \"+\" : \"-\";\r\n      }\r\n      return reduce(node, precision);\r\n    }\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction reduceDivisionExpression(node, precision) {\r\n  if (!isValueType(node.right.type)) return node;\r\n\r\n  if (node.right.type !== \"Value\")\r\n    throw new Error(`Cannot divide by \"${node.right.unit}\", number expected`);\r\n\r\n  if (node.right.value === 0) throw new Error(\"Cannot divide by zero\");\r\n\r\n  // (expr) / value\r\n  if (node.left.type === \"MathExpression\") {\r\n    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\r\n      node.left.left.value /= node.right.value;\r\n      node.left.right.value /= node.right.value;\r\n      return reduce(node.left, precision);\r\n    }\r\n    return node;\r\n  }\r\n  // something / value\r\n  else if (isValueType(node.left.type)) {\r\n    node.left.value /= node.right.value;\r\n    return node.left;\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction reduceMultiplicationExpression(node) {\r\n  // (expr) * value\r\n  if (node.left.type === \"MathExpression\" && node.right.type === \"Value\") {\r\n    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\r\n      node.left.left.value *= node.right.value;\r\n      node.left.right.value *= node.right.value;\r\n      return node.left;\r\n    }\r\n  }\r\n  // something * value\r\n  else if (isValueType(node.left.type) && node.right.type === \"Value\") {\r\n    node.left.value *= node.right.value;\r\n    return node.left;\r\n  }\r\n  // value * (expr)\r\n  else if (node.left.type === \"Value\" && node.right.type === \"MathExpression\") {\r\n    if (\r\n      isValueType(node.right.left.type) &&\r\n      isValueType(node.right.right.type)\r\n    ) {\r\n      node.right.left.value *= node.left.value;\r\n      node.right.right.value *= node.left.value;\r\n      return node.right;\r\n    }\r\n  }\r\n  // value * something\r\n  else if (node.left.type === \"Value\" && isValueType(node.right.type)) {\r\n    node.right.value *= node.left.value;\r\n    return node.right;\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction reduceMaxExpression(node) {\r\n  if (node.left.type !== \"LengthValue\" || node.right.type !== \"LengthValue\") {\r\n    throw new Error(\r\n      \"Max function can be reduced only if types are LengthValue\"\r\n    );\r\n  }\r\n\r\n  node.left.value = Math.max(node.left.value, node.right.value);\r\n  return node.left;\r\n}\r\n\r\nfunction reduceMinExpression(node) {\r\n  if (node.left.type !== \"LengthValue\" || node.right.type !== \"LengthValue\") {\r\n    throw new Error(\r\n      \"Min function can be reduced only if types are LengthValue\"\r\n    );\r\n  }\r\n\r\n  node.left.value = Math.min(node.left.value, node.right.value);\r\n  return node.left;\r\n}\r\n\r\nfunction reduceMathExpression(node, precision) {\r\n  node = convertMathExpression(node, precision);\r\n\r\n  switch (node.operator) {\r\n    case \"+\":\r\n    case \"-\":\r\n      return reduceAddSubExpression(node, precision);\r\n    case \"/\":\r\n      return reduceDivisionExpression(node, precision);\r\n    case \"*\":\r\n      return reduceMultiplicationExpression(node);\r\n    case \"max\":\r\n      return reduceMaxExpression(node);\r\n    case \"min\":\r\n      return reduceMinExpression(node);\r\n  }\r\n  return node;\r\n}\r\n\r\nexport { reduce as reducer };\r\n"],"names":["reduce","node","precision","type","reduceMathExpression","value","isEqual","left","right","isValueType","convertMathExpression","nodes","convert","operator","flip","flipValue","reduceAddSubExpression","op","Object","assign","reduceDivisionExpression","Error","unit","reduceMultiplicationExpression","reduceMaxExpression","Math","max","reduceMinExpression","min"],"mappings":"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"}