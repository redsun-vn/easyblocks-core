{"version":3,"file":"responsiveValueMap.cjs","sources":["../../../src/responsiveness/responsiveValueMap.ts"],"sourcesContent":["import { ResponsiveValue, TrulyResponsiveValue } from \"../types\";\nimport { UnwrapResponsiveValue } from \"./types\";\nimport { isTrulyResponsiveValue } from \"./isTrulyResponsiveValue\";\nimport { responsiveValueEntries } from \"./responsiveValueEntries\";\n\ntype InferReturnType<\n  Type extends ResponsiveValue<unknown>,\n  MappedType\n> = Type extends TrulyResponsiveValue<unknown>\n  ? TrulyResponsiveValue<MappedType>\n  : MappedType;\n\nexport function responsiveValueMap<\n  Input extends ResponsiveValue<unknown>,\n  Output\n>(\n  resVal: Input,\n  mapper: (\n    val: UnwrapResponsiveValue<Input>,\n    breakpointIndex?: string\n  ) => Output\n): InferReturnType<Input, Output> {\n  if (!isTrulyResponsiveValue(resVal)) {\n    return mapper(resVal as UnwrapResponsiveValue<Input>) as InferReturnType<\n      Input,\n      Output\n    >;\n  }\n\n  const ret: TrulyResponsiveValue<Output> = { $res: true };\n\n  responsiveValueEntries(resVal).forEach(([key, value]) => {\n    ret[key] = mapper(value as UnwrapResponsiveValue<Input>, key);\n  });\n\n  return ret as InferReturnType<Input, Output>;\n}\n"],"names":["responsiveValueMap","resVal","mapper","isTrulyResponsiveValue","ret","$res","responsiveValueEntries","forEach","_ref","key","value"],"mappings":";;;;;;;;AAYO,SAASA,kBAAkBA,CAIhCC,MAAa,EACbC,MAGW,EACqB;AAChC,EAAA,IAAI,CAACC,6CAAsB,CAACF,MAAM,CAAC,EAAE;IACnC,OAAOC,MAAM,CAACD,MAAsC,CAAC,CAAA;AAIvD,GAAA;AAEA,EAAA,MAAMG,GAAiC,GAAG;AAAEC,IAAAA,IAAI,EAAE,IAAA;GAAM,CAAA;AAExDC,EAAAA,6CAAsB,CAACL,MAAM,CAAC,CAACM,OAAO,CAACC,IAAA,IAAkB;AAAA,IAAA,IAAjB,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,IAAA,CAAA;IAClDJ,GAAG,CAACK,GAAG,CAAC,GAAGP,MAAM,CAACQ,KAAK,EAAkCD,GAAG,CAAC,CAAA;AAC/D,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOL,GAAG,CAAA;AACZ;;;;"}