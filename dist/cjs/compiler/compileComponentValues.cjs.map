{"version":3,"file":"compileComponentValues.cjs","sources":["../../../src/compiler/compileComponentValues.ts"],"sourcesContent":["/**\n * This compilation function doesn't take schema. It means that it assumes couple of things:\n * 1. That input is NoCodeComponentEntry or 1-item array of. NoCodeComponentEntry. Basically it's a single component.\n * 2. Return format\n */\n\nimport { CompilationCache } from \"./CompilationCache\";\nimport { compileFromSchema } from \"./compileFromSchema\";\nimport { isSchemaPropComponentOrComponentCollection } from \"./schema\";\nimport { CompilationContextType, InternalComponentDefinition } from \"./types\";\n\nexport function compileComponentValues(\n  inputValues: Record<string, any>,\n  componentDefinition: InternalComponentDefinition,\n  compilationContext: CompilationContextType,\n  cache: CompilationCache\n) {\n  const values: Record<string, any> = {};\n\n  componentDefinition!.schema.forEach((schemaProp) => {\n    if (!isSchemaPropComponentOrComponentCollection(schemaProp)) {\n      values[schemaProp.prop] = compileFromSchema(\n        inputValues[schemaProp.prop],\n        schemaProp,\n        compilationContext,\n        cache\n      );\n    }\n  });\n\n  return values;\n}\n"],"names":["compileComponentValues","inputValues","componentDefinition","compilationContext","cache","values","schema","forEach","schemaProp","isSchemaPropComponentOrComponentCollection","prop","compileFromSchema"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAOO,SAASA,sBAAsBA,CACpCC,WAAgC,EAChCC,mBAAgD,EAChDC,kBAA0C,EAC1CC,KAAuB,EACvB;EACA,MAAMC,MAA2B,GAAG,EAAE,CAAA;AAEtCH,EAAAA,mBAAmB,CAAEI,MAAM,CAACC,OAAO,CAAEC,UAAU,IAAK;AAClD,IAAA,IAAI,CAACC,gDAA0C,CAACD,UAAU,CAAC,EAAE;MAC3DH,MAAM,CAACG,UAAU,CAACE,IAAI,CAAC,GAAGC,mCAAiB,CACzCV,WAAW,CAACO,UAAU,CAACE,IAAI,CAAC,EAC5BF,UAAU,EACVL,kBAAkB,EAClBC,KACF,CAAC,CAAA;AACH,KAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOC,MAAM,CAAA;AACf;;;;"}