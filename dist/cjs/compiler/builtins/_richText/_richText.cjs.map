{"version":3,"file":"_richText.cjs","sources":["../../../../../src/compiler/builtins/$richText/$richText.ts"],"sourcesContent":["import { dotNotationGet, nonNullable, range } from \"@/utils\";\r\nimport { Locale, getFallbackLocaleForLocale } from \"../../../locales\";\r\nimport {\r\n  NoCodeComponentDefinition,\r\n  ResponsiveValue,\r\n  TokenValue,\r\n} from \"../../../types\";\r\nimport { configFindAllPaths } from \"../../configFindAllPaths\";\r\nimport { EditableComponentToComponentConfig } from \"../../types\";\r\nimport { richTextStyles } from \"./$richText.styles\";\r\nimport { RichTextEditingFunction } from \"./$richText.types\";\r\nimport {\r\n  RichTextBlockElementComponentConfig,\r\n  richTextBlockElementEditableComponent,\r\n} from \"./$richTextBlockElement/$richTextBlockElement\";\r\nimport type { RichTextPartComponentConfig } from \"./$richTextPart/$richTextPart\";\r\n\r\ntype RichTextAccessibilityRole =\r\n  | \"div\"\r\n  | \"h1\"\r\n  | \"h2\"\r\n  | \"h3\"\r\n  | \"h4\"\r\n  | \"h5\"\r\n  | \"h6\";\r\n\r\nconst editing: RichTextEditingFunction = ({\r\n  values,\r\n  params,\r\n  editingInfo,\r\n  __SECRET_INTERNALS__,\r\n}) => {\r\n  if (!__SECRET_INTERNALS__) {\r\n    throw new Error(\"Missing __SECRET_INTERNALS__\");\r\n  }\r\n\r\n  const { pathPrefix, editorContext } = __SECRET_INTERNALS__;\r\n\r\n  const richTextConfig = dotNotationGet(editorContext.form.values, pathPrefix);\r\n\r\n  const richTextBlockPaths = configFindAllPaths(\r\n    richTextConfig,\r\n    editorContext,\r\n    (config): config is RichTextBlockElementComponentConfig => {\r\n      return config._component === \"@easyblocks/rich-text-block-element\";\r\n    }\r\n  );\r\n\r\n  const richTextBlockPath =\r\n    richTextBlockPaths.length > 0\r\n      ? `${pathPrefix}.${richTextBlockPaths[0]}`\r\n      : undefined;\r\n\r\n  const accessibilityRoleFieldIndex = editingInfo.fields.findIndex(\r\n    (field) => field.path === \"accessibilityRole\"\r\n  );\r\n\r\n  const fieldsBeforeAccessibilityRole = editingInfo.fields\r\n    .slice(0, accessibilityRoleFieldIndex)\r\n    .filter((field) => {\r\n      if (field.path === \"align\" && params.passedAlign !== undefined) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n  const fieldsAfterAccessibilityRole = editingInfo.fields\r\n    .slice(accessibilityRoleFieldIndex)\r\n    .map((field) => {\r\n      if (!richTextBlockPath) {\r\n        return field;\r\n      }\r\n\r\n      const richTextBlockType = dotNotationGet(\r\n        editorContext.form.values,\r\n        `${richTextBlockPath}.type`\r\n      );\r\n\r\n      if (richTextBlockType !== \"paragraph\") {\r\n        if (field.path === \"accessibilityRole\") {\r\n          return {\r\n            ...field,\r\n            visible: false,\r\n          };\r\n        }\r\n\r\n        if (field.path === \"isListStyleAuto\") {\r\n          return {\r\n            ...field,\r\n            visible: true,\r\n          };\r\n        }\r\n\r\n        if (\r\n          !values.isListStyleAuto &&\r\n          (field.path === \"mainFont\" || field.path === \"mainColor\")\r\n        ) {\r\n          return {\r\n            ...field,\r\n            visible: true,\r\n          };\r\n        }\r\n      }\r\n      return field;\r\n    });\r\n\r\n  const richTextPartPaths = configFindAllPaths(\r\n    richTextConfig,\r\n    editorContext,\r\n    (config): config is RichTextPartComponentConfig => {\r\n      return config._component === \"@easyblocks/rich-text-part\";\r\n    }\r\n  );\r\n\r\n  let currentLocaleRichTextPartPaths = richTextPartPaths.filter(\r\n    isRichTextPartPathForLocale(editorContext.contextParams.locale)\r\n  );\r\n\r\n  if (currentLocaleRichTextPartPaths.length === 0) {\r\n    const fallbackLocale = getFallbackLocaleForLocale(\r\n      editorContext.contextParams.locale,\r\n      editorContext.locales\r\n    );\r\n\r\n    if (fallbackLocale) {\r\n      currentLocaleRichTextPartPaths = richTextPartPaths.filter(\r\n        isRichTextPartPathForLocale(fallbackLocale)\r\n      );\r\n    }\r\n  }\r\n\r\n  const richTextPartSources = currentLocaleRichTextPartPaths.map(\r\n    (path) => `${pathPrefix}.${path}`\r\n  );\r\n\r\n  return {\r\n    fields: [\r\n      ...fieldsBeforeAccessibilityRole,\r\n      richTextPartSources.length > 0\r\n        ? {\r\n          type: \"field\",\r\n          path: richTextPartSources.map((source) => `${source}.font`),\r\n        }\r\n        : null,\r\n      richTextPartSources.length > 0\r\n        ? {\r\n          type: \"field\",\r\n          path: richTextPartSources.map((source) => `${source}.color`),\r\n        }\r\n        : null,\r\n      richTextBlockPath\r\n        ? {\r\n          type: \"field\",\r\n          path: `${richTextBlockPath}.type`,\r\n          label: \"List style\",\r\n          group: \"Text\",\r\n        }\r\n        : null,\r\n      ...fieldsAfterAccessibilityRole,\r\n    ].filter(nonNullable()),\r\n  };\r\n};\r\n\r\nconst richTextEditableComponent: NoCodeComponentDefinition = {\r\n  id: \"@easyblocks/rich-text\",\r\n  label: \"Text\",\r\n  thumbnail:\r\n    \"https://shopstory.s3.eu-central-1.amazonaws.com/picker_icon_text.png\",\r\n  schema: [\r\n    {\r\n      prop: \"elements\",\r\n      type: \"component-collection-localised\",\r\n      accepts: [richTextBlockElementEditableComponent.id],\r\n      visible: false,\r\n    },\r\n    {\r\n      prop: \"align\",\r\n      label: \"Align\",\r\n      type: \"radio-group\",\r\n      responsive: true,\r\n      params: {\r\n        options: [\r\n          {\r\n            value: \"left\",\r\n            label: \"Left\",\r\n            icon: \"AlignLeft\",\r\n            hideLabel: true,\r\n          },\r\n          {\r\n            value: \"center\",\r\n            label: \"Center\",\r\n            icon: \"AlignCenter\",\r\n            hideLabel: true,\r\n          },\r\n          {\r\n            value: \"right\",\r\n            label: \"Right\",\r\n            icon: \"AlignRight\",\r\n            hideLabel: true,\r\n          },\r\n        ],\r\n      },\r\n      defaultValue: \"left\",\r\n      group: \"Layout\",\r\n      buildOnly: true,\r\n    },\r\n    {\r\n      prop: \"accessibilityRole\",\r\n      type: \"select\",\r\n      label: \"Role\",\r\n      params: {\r\n        options: [\r\n          { value: \"div\", label: \"Paragraph\" },\r\n          ...range(1, 6).map((index) => ({\r\n            value: `h${index}`,\r\n            label: `Heading ${index}`,\r\n          })),\r\n        ],\r\n      },\r\n      group: \"Accessibility and SEO\",\r\n    },\r\n    {\r\n      prop: \"isListStyleAuto\",\r\n      type: \"boolean\",\r\n      label: \"Auto list styles\",\r\n      defaultValue: true,\r\n      visible: false,\r\n      group: \"Text\",\r\n    },\r\n    {\r\n      prop: \"mainFont\",\r\n      type: \"font\",\r\n      label: \"Main font\",\r\n      visible: false,\r\n      group: \"Text\",\r\n    },\r\n    {\r\n      prop: \"mainColor\",\r\n      type: \"color\",\r\n      label: \"Main color\",\r\n      visible: false,\r\n      group: \"Text\",\r\n    },\r\n  ],\r\n  type: \"item\",\r\n  styles: richTextStyles,\r\n  editing,\r\n};\r\n\r\nfunction isRichTextPartPathForLocale(locale: string) {\r\n  return function innerIsLocalizedRichTextPart(richTextPartConfigPath: string) {\r\n    return richTextPartConfigPath.startsWith(`elements.${locale}`);\r\n  };\r\n}\r\n\r\ntype RichTextComponentConfig = EditableComponentToComponentConfig<\r\n  typeof richTextEditableComponent\r\n> & {\r\n  accessibilityRole: RichTextAccessibilityRole;\r\n  isListStyleAuto: boolean;\r\n  elements: Record<Locale[\"code\"], Array<RichTextBlockElementComponentConfig>>;\r\n  mainFont: ResponsiveValue<TokenValue<Record<string, any>>>;\r\n  mainColor: ResponsiveValue<TokenValue<ResponsiveValue<string>>>;\r\n};\r\n\r\nexport { richTextEditableComponent };\r\nexport type { RichTextAccessibilityRole, RichTextComponentConfig };\r\n"],"names":["editing","_ref","values","params","editingInfo","__SECRET_INTERNALS__","Error","pathPrefix","editorContext","richTextConfig","dotNotationGet","form","richTextBlockPaths","configFindAllPaths","config","_component","richTextBlockPath","length","undefined","accessibilityRoleFieldIndex","fields","findIndex","field","path","fieldsBeforeAccessibilityRole","slice","filter","passedAlign","fieldsAfterAccessibilityRole","map","richTextBlockType","visible","isListStyleAuto","richTextPartPaths","currentLocaleRichTextPartPaths","isRichTextPartPathForLocale","contextParams","locale","fallbackLocale","getFallbackLocaleForLocale","locales","richTextPartSources","type","source","label","group","nonNullable","richTextEditableComponent","id","thumbnail","schema","prop","accepts","richTextBlockElementEditableComponent","responsive","options","value","icon","hideLabel","defaultValue","buildOnly","range","index","styles","richTextStyles","innerIsLocalizedRichTextPart","richTextPartConfigPath","startsWith"],"mappings":"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"}