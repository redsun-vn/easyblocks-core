{"version":3,"file":"convertEditorValueToRichTextElements.cjs","sources":["../../../../../../src/compiler/builtins/$richText/utils/convertEditorValueToRichTextElements.ts"],"sourcesContent":["import { cleanString } from \"@/utils\";\r\nimport { Element } from \"slate\";\r\nimport type {\r\n  BlockElement,\r\n  BulletedList,\r\n  ListItemElement,\r\n  NumberedList,\r\n  ParagraphElement,\r\n  TextLineElement,\r\n} from \"../$richText.types\";\r\nimport type { RichTextBlockElementComponentConfig } from \"../$richTextBlockElement/$richTextBlockElement\";\r\nimport type { RichTextLineElementComponentConfig } from \"../$richTextLineElement/$richTextLineElement\";\r\nimport {\r\n  buildRichTextBlockElementComponentConfig,\r\n  buildRichTextLineElementComponentConfig,\r\n  buildRichTextPartComponentConfig,\r\n} from \"../builders\";\r\n\r\nfunction convertEditorValueToRichTextElements(\r\n  editorValue: Array<BlockElement>\r\n): Array<RichTextBlockElementComponentConfig> {\r\n  return editorValue.map((blockElement) => {\r\n    if (Element.isElementType<BulletedList>(blockElement, \"bulleted-list\")) {\r\n      return convertEditorListElementToRichTextListBlockElement<BulletedList>(\r\n        \"bulleted-list\",\r\n        blockElement\r\n      );\r\n    }\r\n\r\n    if (Element.isElementType<NumberedList>(blockElement, \"numbered-list\")) {\r\n      return convertEditorListElementToRichTextListBlockElement<NumberedList>(\r\n        \"numbered-list\",\r\n        blockElement\r\n      );\r\n    }\r\n\r\n    if (Element.isElementType<ParagraphElement>(blockElement, \"paragraph\")) {\r\n      return convertEditorParagraphElementToRichTextParagraphBlockElement(\r\n        blockElement\r\n      );\r\n    }\r\n\r\n    throw new Error(\"Unknown block element\");\r\n  });\r\n}\r\n\r\nfunction convertEditorElementToRichTextLineElement(\r\n  editorElement: TextLineElement | ListItemElement\r\n): RichTextLineElementComponentConfig {\r\n  const lineElement = buildRichTextLineElementComponentConfig({\r\n    elements: editorElement.children.map((child) => {\r\n      return buildRichTextPartComponentConfig({\r\n        value: cleanString(child.text),\r\n        color: child.color,\r\n        font: child.font,\r\n        id: child.id,\r\n        TextWrapper: child.TextWrapper,\r\n      });\r\n    }),\r\n  });\r\n  lineElement._id = editorElement.id;\r\n\r\n  return lineElement;\r\n}\r\n\r\nfunction convertEditorListElementToRichTextListBlockElement<\r\n  ListElement extends BulletedList | NumberedList\r\n>(\r\n  type: \"bulleted-list\" | \"numbered-list\",\r\n  editorElement: ListElement\r\n): RichTextBlockElementComponentConfig {\r\n  const listBlockElement = buildRichTextBlockElementComponentConfig(\r\n    type,\r\n    editorElement.children.map((child) => {\r\n      return convertEditorElementToRichTextLineElement(child);\r\n    })\r\n  );\r\n  listBlockElement._id = editorElement.id;\r\n\r\n  return listBlockElement;\r\n}\r\n\r\nfunction convertEditorParagraphElementToRichTextParagraphBlockElement(\r\n  editorElement: ParagraphElement\r\n): RichTextBlockElementComponentConfig {\r\n  const paragraphBlockElement = buildRichTextBlockElementComponentConfig(\r\n    \"paragraph\",\r\n    editorElement.children.map((child) => {\r\n      return convertEditorElementToRichTextLineElement(child);\r\n    })\r\n  );\r\n  paragraphBlockElement._id = editorElement.id;\r\n\r\n  return paragraphBlockElement;\r\n}\r\n\r\nexport { convertEditorValueToRichTextElements };\r\n"],"names":["convertEditorValueToRichTextElements","editorValue","map","blockElement","Element","isElementType","convertEditorListElementToRichTextListBlockElement","convertEditorParagraphElementToRichTextParagraphBlockElement","Error","convertEditorElementToRichTextLineElement","editorElement","lineElement","buildRichTextLineElementComponentConfig","elements","children","child","buildRichTextPartComponentConfig","value","cleanString","text","color","font","id","TextWrapper","_id","type","listBlockElement","buildRichTextBlockElementComponentConfig","paragraphBlockElement"],"mappings":";;;;;;;;;AAkBA,SAASA,oCAAoCA,CAC3CC,WAAgC,EACY;AAC5C,EAAA,OAAOA,WAAW,CAACC,GAAG,CAAEC,YAAY,IAAK;IACvC,IAAIC,aAAO,CAACC,aAAa,CAAeF,YAAY,EAAE,eAAe,CAAC,EAAE;AACtE,MAAA,OAAOG,kDAAkD,CACvD,eAAe,EACfH,YACF,CAAC,CAAA;AACH,KAAA;IAEA,IAAIC,aAAO,CAACC,aAAa,CAAeF,YAAY,EAAE,eAAe,CAAC,EAAE;AACtE,MAAA,OAAOG,kDAAkD,CACvD,eAAe,EACfH,YACF,CAAC,CAAA;AACH,KAAA;IAEA,IAAIC,aAAO,CAACC,aAAa,CAAmBF,YAAY,EAAE,WAAW,CAAC,EAAE;MACtE,OAAOI,4DAA4D,CACjEJ,YACF,CAAC,CAAA;AACH,KAAA;AAEA,IAAA,MAAM,IAAIK,KAAK,CAAC,uBAAuB,CAAC,CAAA;AAC1C,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA,SAASC,yCAAyCA,CAChDC,aAAgD,EACZ;EACpC,MAAMC,WAAW,GAAGC,gDAAuC,CAAC;IAC1DC,QAAQ,EAAEH,aAAa,CAACI,QAAQ,CAACZ,GAAG,CAAEa,KAAK,IAAK;AAC9C,MAAA,OAAOC,yCAAgC,CAAC;AACtCC,QAAAA,KAAK,EAAEC,uBAAW,CAACH,KAAK,CAACI,IAAI,CAAC;QAC9BC,KAAK,EAAEL,KAAK,CAACK,KAAK;QAClBC,IAAI,EAAEN,KAAK,CAACM,IAAI;QAChBC,EAAE,EAAEP,KAAK,CAACO,EAAE;QACZC,WAAW,EAAER,KAAK,CAACQ,WAAAA;AACrB,OAAC,CAAC,CAAA;KACH,CAAA;AACH,GAAC,CAAC,CAAA;AACFZ,EAAAA,WAAW,CAACa,GAAG,GAAGd,aAAa,CAACY,EAAE,CAAA;AAElC,EAAA,OAAOX,WAAW,CAAA;AACpB,CAAA;AAEA,SAASL,kDAAkDA,CAGzDmB,IAAuC,EACvCf,aAA0B,EACW;AACrC,EAAA,MAAMgB,gBAAgB,GAAGC,iDAAwC,CAC/DF,IAAI,EACJf,aAAa,CAACI,QAAQ,CAACZ,GAAG,CAAEa,KAAK,IAAK;IACpC,OAAON,yCAAyC,CAACM,KAAK,CAAC,CAAA;AACzD,GAAC,CACH,CAAC,CAAA;AACDW,EAAAA,gBAAgB,CAACF,GAAG,GAAGd,aAAa,CAACY,EAAE,CAAA;AAEvC,EAAA,OAAOI,gBAAgB,CAAA;AACzB,CAAA;AAEA,SAASnB,4DAA4DA,CACnEG,aAA+B,EACM;AACrC,EAAA,MAAMkB,qBAAqB,GAAGD,iDAAwC,CACpE,WAAW,EACXjB,aAAa,CAACI,QAAQ,CAACZ,GAAG,CAAEa,KAAK,IAAK;IACpC,OAAON,yCAAyC,CAACM,KAAK,CAAC,CAAA;AACzD,GAAC,CACH,CAAC,CAAA;AACDa,EAAAA,qBAAqB,CAACJ,GAAG,GAAGd,aAAa,CAACY,EAAE,CAAA;AAE5C,EAAA,OAAOM,qBAAqB,CAAA;AAC9B;;;;"}