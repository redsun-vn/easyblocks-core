{"version":3,"file":"_richTextBlockElement.styles.cjs","sources":["../../../../../../src/compiler/builtins/$richText/$richTextBlockElement/$richTextBlockElement.styles.ts"],"sourcesContent":["import type { RichTextAccessibilityRole } from \"../$richText\";\nimport { Alignment } from \"../$richText.types\";\nimport type { RichTextPartCompiledComponentConfig } from \"../$richTextPart/$richTextPart\";\nimport {\n  NoCodeComponentStylesFunctionInput,\n  NoCodeComponentStylesFunctionResult,\n} from \"../../../../types\";\nimport type { RichTextBlockElementType } from \"./$richTextBlockElement\";\n\nexport type RichTextBlockElementValues = {\n  elements: Array<{ elements: Array<RichTextPartCompiledComponentConfig> }>;\n  type: RichTextBlockElementType;\n};\n\nfunction px(value: string | number) {\n  if (typeof value === \"number\") {\n    return value === 0 ? \"0\" : `${value}px`;\n  }\n\n  return value;\n}\n\nconst BULLETED_LIST_MIN_INLINE_SPACING = 8;\nconst NUMBERED_LIST_MIN_COUNTER_SPACING = 8;\nconst NUMBERED_LIST_MAX_COUNTER_SPACING = \"0.5ch\";\n/**\n * Numbered list consists of number and dot. We can safely calculate required space for number by\n * counting digits of list length and using `ch` unit. Dot character differentiate between fonts\n * and we reserve at least 0.5ch of space.\n */\nconst NUMBERED_LIST_DOT_CHARACTER_SAFE_WIDTH = \"0.5ch\";\nconst BULLET_CHARACTER = \"\\u2022\";\n\nexport type RichTextBlockElementParams = {\n  accessibilityRole: RichTextAccessibilityRole;\n  align: Alignment;\n  mainColor: string;\n  mainFont: Record<string, any>;\n  mainFontSize: string | number;\n};\n\nexport function richTextBlockElementStyles({\n  values: { elements, type },\n  params: { accessibilityRole, align, mainColor, mainFont, mainFontSize },\n}: NoCodeComponentStylesFunctionInput<\n  RichTextBlockElementValues,\n  RichTextBlockElementParams\n>): NoCodeComponentStylesFunctionResult {\n  const maxDigitsCount = elements.length.toString().length;\n\n  const paddingInline = `clamp(${px(\n    BULLETED_LIST_MIN_INLINE_SPACING\n  )}, calc(${px(mainFontSize)} * 0.5), ${px(mainFontSize)})`;\n\n  const bulletedListMarkerStyles = {\n    paddingLeft: paddingInline,\n    paddingRight: paddingInline,\n    content: BULLET_CHARACTER,\n  };\n\n  const numberedListMarkerStyles = {\n    minWidth: `calc(${maxDigitsCount} * 1ch + ${NUMBERED_LIST_DOT_CHARACTER_SAFE_WIDTH})`,\n    paddingRight: `clamp(${px(\n      NUMBERED_LIST_MIN_COUNTER_SPACING\n    )}, 0.5ch, ${NUMBERED_LIST_MAX_COUNTER_SPACING})`,\n    fontVariantNumeric: \"tabular-nums\",\n    textAlign: \"right\",\n    content: `counter(list-item)\".\"`,\n  };\n\n  const markerStyles = {\n    boxSizing: \"content-box\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexGrow: 0,\n    flexShrink: 0,\n    fontSize: mainFontSize,\n    ...(type === \"bulleted-list\"\n      ? bulletedListMarkerStyles\n      : numberedListMarkerStyles),\n  };\n\n  const listStyles = {\n    counterSet: \"list-item\",\n    paddingLeft: 0,\n    listStyle: \"none\",\n    color: mainColor,\n    ...mainFont,\n    \"& > li\": {\n      color: mainColor,\n      ...mainFont,\n      // Instead of using ::marker pseudo-element, we use ::before because it gives us more control over its appearance.\n      \"&::before\": markerStyles,\n    },\n  };\n\n  return {\n    styled: {\n      Paragraph: { __as: accessibilityRole },\n      BulletedList: { __as: \"ul\", ...listStyles },\n      NumberedList: { __as: \"ol\", ...listStyles },\n    },\n    components: {\n      elements: {\n        itemProps: elements.map(() => ({\n          blockType: type,\n          align,\n        })),\n      },\n    },\n  };\n}\n"],"names":["px","value","BULLETED_LIST_MIN_INLINE_SPACING","NUMBERED_LIST_MIN_COUNTER_SPACING","NUMBERED_LIST_MAX_COUNTER_SPACING","NUMBERED_LIST_DOT_CHARACTER_SAFE_WIDTH","BULLET_CHARACTER","richTextBlockElementStyles","_ref","values","elements","type","params","accessibilityRole","align","mainColor","mainFont","mainFontSize","maxDigitsCount","length","toString","paddingInline","bulletedListMarkerStyles","paddingLeft","paddingRight","content","numberedListMarkerStyles","minWidth","fontVariantNumeric","textAlign","markerStyles","boxSizing","display","alignItems","justifyContent","flexGrow","flexShrink","fontSize","listStyles","counterSet","listStyle","color","styled","Paragraph","__as","BulletedList","NumberedList","components","itemProps","map","blockType"],"mappings":"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"}