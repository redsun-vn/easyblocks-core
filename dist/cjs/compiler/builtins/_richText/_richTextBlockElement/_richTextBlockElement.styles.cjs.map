{"version":3,"file":"_richTextBlockElement.styles.cjs","sources":["../../../../../../src/compiler/builtins/$richText/$richTextBlockElement/$richTextBlockElement.styles.ts"],"sourcesContent":["import type { RichTextAccessibilityRole } from \"../$richText\";\r\nimport { Alignment } from \"../$richText.types\";\r\nimport type { RichTextPartCompiledComponentConfig } from \"../$richTextPart/$richTextPart\";\r\nimport {\r\n  NoCodeComponentStylesFunctionInput,\r\n  NoCodeComponentStylesFunctionResult,\r\n} from \"../../../../types\";\r\nimport type { RichTextBlockElementType } from \"./$richTextBlockElement\";\r\n\r\nexport type RichTextBlockElementValues = {\r\n  elements: Array<{ elements: Array<RichTextPartCompiledComponentConfig> }>;\r\n  type: RichTextBlockElementType;\r\n};\r\n\r\nfunction px(value: string | number) {\r\n  if (typeof value === \"number\") {\r\n    return value === 0 ? \"0\" : `${value}px`;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nconst BULLETED_LIST_MIN_INLINE_SPACING = 8;\r\nconst NUMBERED_LIST_MIN_COUNTER_SPACING = 8;\r\nconst NUMBERED_LIST_MAX_COUNTER_SPACING = \"0.5ch\";\r\n/**\r\n * Numbered list consists of number and dot. We can safely calculate required space for number by\r\n * counting digits of list length and using `ch` unit. Dot character differentiate between fonts\r\n * and we reserve at least 0.5ch of space.\r\n */\r\nconst NUMBERED_LIST_DOT_CHARACTER_SAFE_WIDTH = \"0.5ch\";\r\nconst BULLET_CHARACTER = \"\\u2022\";\r\n\r\nexport type RichTextBlockElementParams = {\r\n  accessibilityRole: RichTextAccessibilityRole;\r\n  align: Alignment;\r\n  mainColor: string;\r\n  mainFont: Record<string, any>;\r\n  mainFontSize: string | number;\r\n};\r\n\r\nexport function richTextBlockElementStyles({\r\n  values: { elements, type },\r\n  params: { accessibilityRole, align, mainColor, mainFont, mainFontSize },\r\n}: NoCodeComponentStylesFunctionInput<\r\n  RichTextBlockElementValues,\r\n  RichTextBlockElementParams\r\n>): NoCodeComponentStylesFunctionResult {\r\n  const maxDigitsCount = elements.length.toString().length;\r\n\r\n  const paddingInline = `clamp(${px(\r\n    BULLETED_LIST_MIN_INLINE_SPACING\r\n  )}, calc(${px(mainFontSize)} * 0.5), ${px(mainFontSize)})`;\r\n\r\n  const bulletedListMarkerStyles = {\r\n    paddingLeft: paddingInline,\r\n    paddingRight: paddingInline,\r\n    content: BULLET_CHARACTER,\r\n  };\r\n\r\n  const numberedListMarkerStyles = {\r\n    minWidth: `calc(${maxDigitsCount} * 1ch + ${NUMBERED_LIST_DOT_CHARACTER_SAFE_WIDTH})`,\r\n    paddingRight: `clamp(${px(\r\n      NUMBERED_LIST_MIN_COUNTER_SPACING\r\n    )}, 0.5ch, ${NUMBERED_LIST_MAX_COUNTER_SPACING})`,\r\n    fontVariantNumeric: \"tabular-nums\",\r\n    textAlign: \"right\",\r\n    content: `counter(list-item)\".\"`,\r\n  };\r\n\r\n  const markerStyles = {\r\n    boxSizing: \"content-box\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    flexGrow: 0,\r\n    flexShrink: 0,\r\n    fontSize: mainFontSize,\r\n    ...(type === \"bulleted-list\"\r\n      ? bulletedListMarkerStyles\r\n      : numberedListMarkerStyles),\r\n  };\r\n\r\n  const listStyles = {\r\n    counterSet: \"list-item\",\r\n    paddingLeft: 0,\r\n    listStyle: \"none\",\r\n    color: mainColor,\r\n    ...mainFont,\r\n    \"& > li\": {\r\n      color: mainColor,\r\n      ...mainFont,\r\n      // Instead of using ::marker pseudo-element, we use ::before because it gives us more control over its appearance.\r\n      \"&::before\": markerStyles,\r\n    },\r\n  };\r\n\r\n  return {\r\n    styled: {\r\n      Paragraph: { __as: accessibilityRole },\r\n      BulletedList: { __as: \"ul\", ...listStyles },\r\n      NumberedList: { __as: \"ol\", ...listStyles },\r\n    },\r\n    components: {\r\n      elements: {\r\n        itemProps: elements.map(() => ({\r\n          blockType: type,\r\n          align,\r\n        })),\r\n      },\r\n    },\r\n  };\r\n}\r\n"],"names":["px","value","BULLETED_LIST_MIN_INLINE_SPACING","NUMBERED_LIST_MIN_COUNTER_SPACING","NUMBERED_LIST_MAX_COUNTER_SPACING","NUMBERED_LIST_DOT_CHARACTER_SAFE_WIDTH","BULLET_CHARACTER","richTextBlockElementStyles","_ref","values","elements","type","params","accessibilityRole","align","mainColor","mainFont","mainFontSize","maxDigitsCount","length","toString","paddingInline","bulletedListMarkerStyles","paddingLeft","paddingRight","content","numberedListMarkerStyles","minWidth","fontVariantNumeric","textAlign","markerStyles","boxSizing","display","alignItems","justifyContent","flexGrow","flexShrink","fontSize","listStyles","counterSet","listStyle","color","styled","Paragraph","__as","BulletedList","NumberedList","components","itemProps","map","blockType"],"mappings":"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"}