{"version":3,"file":"_text.client.cjs","sources":["../../../../../src/compiler/builtins/$text/$text.client.tsx"],"sourcesContent":["import { cleanString } from \"@/utils\";\nimport React, { ReactElement } from \"react\";\n\ntype TextProps = {\n  value?: string;\n  Text: ReactElement;\n};\n\nfunction TextClient(props: TextProps) {\n  const { value, Text } = props;\n\n  // We need to transform new lines into <br />\n  const lines = cleanString(value || \"\").split(/(?:\\r\\n|\\r|\\n)/g);\n\n  const elements: React.ReactElement[] = [];\n\n  lines.forEach((line, index) => {\n    elements.push(<React.Fragment key={index}>{line}</React.Fragment>);\n    if (index !== lines.length - 1) {\n      elements.push(<br key={\"br\" + index} />);\n    }\n  });\n\n  return <Text.type {...Text.props}>{elements}</Text.type>;\n}\n\nexport { TextClient };\n"],"names":["TextClient","props","value","Text","lines","cleanString","split","elements","forEach","line","index","push","React","createElement","Fragment","key","length","type"],"mappings":";;;;;;;;;;;;AAQA,SAASA,UAAUA,CAACC,KAAgB,EAAE;EACpC,MAAM;IAAEC,KAAK;AAAEC,IAAAA,IAAAA;AAAK,GAAC,GAAGF,KAAK,CAAA;;AAE7B;AACA,EAAA,MAAMG,KAAK,GAAGC,uBAAW,CAACH,KAAK,IAAI,EAAE,CAAC,CAACI,KAAK,CAAC,iBAAiB,CAAC,CAAA;EAE/D,MAAMC,QAA8B,GAAG,EAAE,CAAA;AAEzCH,EAAAA,KAAK,CAACI,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7BH,QAAQ,CAACI,IAAI,cAACC,yBAAA,CAAAC,aAAA,CAACD,yBAAK,CAACE,QAAQ,EAAA;AAACC,MAAAA,GAAG,EAAEL,KAAAA;KAAQD,EAAAA,IAAqB,CAAC,CAAC,CAAA;AAClE,IAAA,IAAIC,KAAK,KAAKN,KAAK,CAACY,MAAM,GAAG,CAAC,EAAE;AAC9BT,MAAAA,QAAQ,CAACI,IAAI,cAACC,yBAAA,CAAAC,aAAA,CAAA,IAAA,EAAA;QAAIE,GAAG,EAAE,IAAI,GAAGL,KAAAA;AAAM,OAAE,CAAC,CAAC,CAAA;AAC1C,KAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,oBAAOE,yBAAA,CAAAC,aAAA,CAACV,IAAI,CAACc,IAAI,EAAKd,IAAI,CAACF,KAAK,EAAGM,QAAoB,CAAC,CAAA;AAC1D;;;;"}