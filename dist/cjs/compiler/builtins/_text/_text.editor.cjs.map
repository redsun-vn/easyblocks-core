{"version":3,"file":"_text.editor.cjs","sources":["../../../../../src/compiler/builtins/$text/$text.editor.tsx"],"sourcesContent":["\"use client\";\r\nimport { dotNotationGet } from \"@/utils\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { InternalNoCodeComponentProps } from \"../../../components/ComponentBuilder/ComponentBuilder\";\r\nimport { InlineTextarea } from \"./InlineTextarea\";\r\n\r\ntype TextProps = {\r\n  value: string | undefined;\r\n  Text: ReactElement;\r\n} & InternalNoCodeComponentProps;\r\n\r\nfunction TextEditor(props: TextProps) {\r\n  const {\r\n    Text,\r\n    value,\r\n    __easyblocks: { path, runtime },\r\n  } = props;\r\n\r\n  const { form } = (window.parent as any).editorWindowAPI.editorContext;\r\n  const valuePath = `${path}.value`;\r\n  const configValue = dotNotationGet(form.values, valuePath);\r\n  const isLocalTextReference = configValue?.id?.startsWith(\"local.\");\r\n\r\n  return (\r\n    <Text.type {...Text.props} as={\"div\"}>\r\n      {isLocalTextReference ? (\r\n        <InlineTextarea\r\n          path={path}\r\n          placeholder={\"Here goes text content\"}\r\n          stitches={runtime.stitches}\r\n        />\r\n      ) : (\r\n        value ?? <span>&nbsp;</span>\r\n      )}\r\n    </Text.type>\r\n  );\r\n}\r\n\r\nexport { TextEditor };\r\n"],"names":["__easyblocks","runtime","form","as","path","placeholder"],"mappings":";;;;;;;;;;;;;;;;AAWA;;;;AAIIA;;AAAsBC;AAAQ;AAChC;;AAEQC;AAAK;AACb;;;AAIA;AAC6BC;AAAU;AAG/BC;AACAC;;;AAQV;;"}