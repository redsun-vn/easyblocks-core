{"version":3,"file":"_text.editor.cjs","sources":["../../../../../src/compiler/builtins/$text/$text.editor.tsx"],"sourcesContent":["\"use client\";\nimport { dotNotationGet } from \"@/utils\";\nimport React, { ReactElement } from \"react\";\nimport { InternalNoCodeComponentProps } from \"../../../components/ComponentBuilder/ComponentBuilder\";\nimport { InlineTextarea } from \"./InlineTextarea\";\n\ntype TextProps = {\n  value: string | undefined;\n  Text: ReactElement;\n} & InternalNoCodeComponentProps;\n\nfunction TextEditor(props: TextProps) {\n  const {\n    Text,\n    value,\n    __easyblocks: { path, runtime },\n  } = props;\n\n  const { form } = (window.parent as any).editorWindowAPI.editorContext;\n  const valuePath = `${path}.value`;\n  const configValue = dotNotationGet(form.values, valuePath);\n  const isLocalTextReference = configValue?.id?.startsWith(\"local.\");\n\n  return (\n    <Text.type {...Text.props} as={\"div\"}>\n      {isLocalTextReference ? (\n        <InlineTextarea\n          path={path}\n          placeholder={\"Here goes text content\"}\n          stitches={runtime.stitches}\n        />\n      ) : (\n        value ?? <span>&nbsp;</span>\n      )}\n    </Text.type>\n  );\n}\n\nexport { TextEditor };\n"],"names":["__easyblocks","runtime","form","as","path","placeholder"],"mappings":";;;;;;;;;;;;;;;;AAWA;;;;AAIIA;;AAAsBC;AAAQ;AAChC;;AAEQC;AAAK;AACb;;;AAIA;AAC6BC;AAAU;AAG/BC;AACAC;;;AAQV;;"}